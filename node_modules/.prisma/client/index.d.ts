
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Staff
 * 
 */
export type Staff = {
  id: number
  createdAt: Date
  updatedAt: Date
  firstName: string
  lastName: string
  email: string
  staffNo: string
  password: string
  role: string
}

/**
 * Model Lecturer
 * 
 */
export type Lecturer = {
  id: number
  staffNo: string
  faculty: string
  department: string
  approved: boolean
  unit: string
}

/**
 * Model Admin
 * 
 */
export type Admin = {
  id: number
  username: string
  staffNo: string
}

/**
 * Model Student
 * 
 */
export type Student = {
  id: number
  registrationNumber: string
  firstName: string
  lastName: string
  email: string
  year: number
  approved: boolean
  password: string
  createdOn: Date
  updatedOn: Date
}

/**
 * Model Course
 * 
 */
export type Course = {
  id: number
  yearSemester: string
  unit: number
  updated: Date
  staffNo: string
  lecturerId: number | null
}

/**
 * Model RegisteredUnits
 * 
 */
export type RegisteredUnits = {
  id: number
  unit: number
  registrationNumber: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Staff
 * const staff = await prisma.staff.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Staff
   * const staff = await prisma.staff.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.staff`: Exposes CRUD operations for the **Staff** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Staff
    * const staff = await prisma.staff.findMany()
    * ```
    */
  get staff(): Prisma.StaffDelegate<GlobalReject>;

  /**
   * `prisma.lecturer`: Exposes CRUD operations for the **Lecturer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lecturers
    * const lecturers = await prisma.lecturer.findMany()
    * ```
    */
  get lecturer(): Prisma.LecturerDelegate<GlobalReject>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<GlobalReject>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<GlobalReject>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<GlobalReject>;

  /**
   * `prisma.registeredUnits`: Exposes CRUD operations for the **RegisteredUnits** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RegisteredUnits
    * const registeredUnits = await prisma.registeredUnits.findMany()
    * ```
    */
  get registeredUnits(): Prisma.RegisteredUnitsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Extensions
   */
  export type Extension = runtime.Extension 

  /**
   * Prisma Client JS version: 4.5.0
   * Query Engine version: 0362da9eebca54d94c8ef5edd3b2e90af99ba452
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Staff: 'Staff',
    Lecturer: 'Lecturer',
    Admin: 'Admin',
    Student: 'Student',
    Course: 'Course',
    RegisteredUnits: 'RegisteredUnits'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StaffCountOutputType
   */


  export type StaffCountOutputType = {
    Course: number
  }

  export type StaffCountOutputTypeSelect = {
    Course?: boolean
  }

  export type StaffCountOutputTypeGetPayload<
    S extends boolean | null | undefined | StaffCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? StaffCountOutputType
    : S extends undefined
    ? never
    : S extends StaffCountOutputTypeArgs
    ?'include' extends U
    ? StaffCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof StaffCountOutputType ? StaffCountOutputType[P] : never
  } 
    : StaffCountOutputType
  : StaffCountOutputType




  // Custom InputTypes

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the StaffCountOutputType
     * 
    **/
    select?: StaffCountOutputTypeSelect | null
  }



  /**
   * Count Type LecturerCountOutputType
   */


  export type LecturerCountOutputType = {
    courses: number
  }

  export type LecturerCountOutputTypeSelect = {
    courses?: boolean
  }

  export type LecturerCountOutputTypeGetPayload<
    S extends boolean | null | undefined | LecturerCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? LecturerCountOutputType
    : S extends undefined
    ? never
    : S extends LecturerCountOutputTypeArgs
    ?'include' extends U
    ? LecturerCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof LecturerCountOutputType ? LecturerCountOutputType[P] : never
  } 
    : LecturerCountOutputType
  : LecturerCountOutputType




  // Custom InputTypes

  /**
   * LecturerCountOutputType without action
   */
  export type LecturerCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the LecturerCountOutputType
     * 
    **/
    select?: LecturerCountOutputTypeSelect | null
  }



  /**
   * Count Type StudentCountOutputType
   */


  export type StudentCountOutputType = {
    registeredUnits: number
  }

  export type StudentCountOutputTypeSelect = {
    registeredUnits?: boolean
  }

  export type StudentCountOutputTypeGetPayload<
    S extends boolean | null | undefined | StudentCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? StudentCountOutputType
    : S extends undefined
    ? never
    : S extends StudentCountOutputTypeArgs
    ?'include' extends U
    ? StudentCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof StudentCountOutputType ? StudentCountOutputType[P] : never
  } 
    : StudentCountOutputType
  : StudentCountOutputType




  // Custom InputTypes

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     * 
    **/
    select?: StudentCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Staff
   */


  export type AggregateStaff = {
    _count: StaffCountAggregateOutputType | null
    _avg: StaffAvgAggregateOutputType | null
    _sum: StaffSumAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  export type StaffAvgAggregateOutputType = {
    id: number | null
  }

  export type StaffSumAggregateOutputType = {
    id: number | null
  }

  export type StaffMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    firstName: string | null
    lastName: string | null
    email: string | null
    staffNo: string | null
    password: string | null
    role: string | null
  }

  export type StaffMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    firstName: string | null
    lastName: string | null
    email: string | null
    staffNo: string | null
    password: string | null
    role: string | null
  }

  export type StaffCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    firstName: number
    lastName: number
    email: number
    staffNo: number
    password: number
    role: number
    _all: number
  }


  export type StaffAvgAggregateInputType = {
    id?: true
  }

  export type StaffSumAggregateInputType = {
    id?: true
  }

  export type StaffMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
    lastName?: true
    email?: true
    staffNo?: true
    password?: true
    role?: true
  }

  export type StaffMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
    lastName?: true
    email?: true
    staffNo?: true
    password?: true
    role?: true
  }

  export type StaffCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
    lastName?: true
    email?: true
    staffNo?: true
    password?: true
    role?: true
    _all?: true
  }

  export type StaffAggregateArgs = {
    /**
     * Filter which Staff to aggregate.
     * 
    **/
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     * 
    **/
    orderBy?: Enumerable<StaffOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Staff
    **/
    _count?: true | StaffCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StaffAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StaffSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffMaxAggregateInputType
  }

  export type GetStaffAggregateType<T extends StaffAggregateArgs> = {
        [P in keyof T & keyof AggregateStaff]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaff[P]>
      : GetScalarType<T[P], AggregateStaff[P]>
  }




  export type StaffGroupByArgs = {
    where?: StaffWhereInput
    orderBy?: Enumerable<StaffOrderByWithAggregationInput>
    by: Array<StaffScalarFieldEnum>
    having?: StaffScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffCountAggregateInputType | true
    _avg?: StaffAvgAggregateInputType
    _sum?: StaffSumAggregateInputType
    _min?: StaffMinAggregateInputType
    _max?: StaffMaxAggregateInputType
  }


  export type StaffGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    firstName: string
    lastName: string
    email: string
    staffNo: string
    password: string
    role: string
    _count: StaffCountAggregateOutputType | null
    _avg: StaffAvgAggregateOutputType | null
    _sum: StaffSumAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  type GetStaffGroupByPayload<T extends StaffGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StaffGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffGroupByOutputType[P]>
            : GetScalarType<T[P], StaffGroupByOutputType[P]>
        }
      >
    >


  export type StaffSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    staffNo?: boolean
    password?: boolean
    role?: boolean
    lecturer?: boolean | LecturerArgs
    admin?: boolean | AdminArgs
    Course?: boolean | CourseFindManyArgs
    _count?: boolean | StaffCountOutputTypeArgs
  }

  export type StaffInclude = {
    lecturer?: boolean | LecturerArgs
    admin?: boolean | AdminArgs
    Course?: boolean | CourseFindManyArgs
    _count?: boolean | StaffCountOutputTypeArgs
  }

  export type StaffGetPayload<
    S extends boolean | null | undefined | StaffArgs,
    U = keyof S
      > = S extends true
        ? Staff
    : S extends undefined
    ? never
    : S extends StaffArgs | StaffFindManyArgs
    ?'include' extends U
    ? Staff  & {
    [P in TrueKeys<S['include']>]:
        P extends 'lecturer' ? LecturerGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'admin' ? AdminGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'Course' ? Array < CourseGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? StaffCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'lecturer' ? LecturerGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'admin' ? AdminGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'Course' ? Array < CourseGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? StaffCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Staff ? Staff[P] : never
  } 
    : Staff
  : Staff


  type StaffCountArgs = Merge<
    Omit<StaffFindManyArgs, 'select' | 'include'> & {
      select?: StaffCountAggregateInputType | true
    }
  >

  export interface StaffDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Staff that matches the filter.
     * @param {StaffFindUniqueArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StaffFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StaffFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Staff'> extends True ? CheckSelect<T, Prisma__StaffClient<Staff>, Prisma__StaffClient<StaffGetPayload<T>>> : CheckSelect<T, Prisma__StaffClient<Staff | null, null>, Prisma__StaffClient<StaffGetPayload<T> | null, null>>

    /**
     * Find the first Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindFirstArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StaffFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StaffFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Staff'> extends True ? CheckSelect<T, Prisma__StaffClient<Staff>, Prisma__StaffClient<StaffGetPayload<T>>> : CheckSelect<T, Prisma__StaffClient<Staff | null, null>, Prisma__StaffClient<StaffGetPayload<T> | null, null>>

    /**
     * Find zero or more Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Staff
     * const staff = await prisma.staff.findMany()
     * 
     * // Get first 10 Staff
     * const staff = await prisma.staff.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffWithIdOnly = await prisma.staff.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StaffFindManyArgs>(
      args?: SelectSubset<T, StaffFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Staff>>, PrismaPromise<Array<StaffGetPayload<T>>>>

    /**
     * Create a Staff.
     * @param {StaffCreateArgs} args - Arguments to create a Staff.
     * @example
     * // Create one Staff
     * const Staff = await prisma.staff.create({
     *   data: {
     *     // ... data to create a Staff
     *   }
     * })
     * 
    **/
    create<T extends StaffCreateArgs>(
      args: SelectSubset<T, StaffCreateArgs>
    ): CheckSelect<T, Prisma__StaffClient<Staff>, Prisma__StaffClient<StaffGetPayload<T>>>

    /**
     * Create many Staff.
     *     @param {StaffCreateManyArgs} args - Arguments to create many Staff.
     *     @example
     *     // Create many Staff
     *     const staff = await prisma.staff.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StaffCreateManyArgs>(
      args?: SelectSubset<T, StaffCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Staff.
     * @param {StaffDeleteArgs} args - Arguments to delete one Staff.
     * @example
     * // Delete one Staff
     * const Staff = await prisma.staff.delete({
     *   where: {
     *     // ... filter to delete one Staff
     *   }
     * })
     * 
    **/
    delete<T extends StaffDeleteArgs>(
      args: SelectSubset<T, StaffDeleteArgs>
    ): CheckSelect<T, Prisma__StaffClient<Staff>, Prisma__StaffClient<StaffGetPayload<T>>>

    /**
     * Update one Staff.
     * @param {StaffUpdateArgs} args - Arguments to update one Staff.
     * @example
     * // Update one Staff
     * const staff = await prisma.staff.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StaffUpdateArgs>(
      args: SelectSubset<T, StaffUpdateArgs>
    ): CheckSelect<T, Prisma__StaffClient<Staff>, Prisma__StaffClient<StaffGetPayload<T>>>

    /**
     * Delete zero or more Staff.
     * @param {StaffDeleteManyArgs} args - Arguments to filter Staff to delete.
     * @example
     * // Delete a few Staff
     * const { count } = await prisma.staff.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StaffDeleteManyArgs>(
      args?: SelectSubset<T, StaffDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Staff
     * const staff = await prisma.staff.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StaffUpdateManyArgs>(
      args: SelectSubset<T, StaffUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Staff.
     * @param {StaffUpsertArgs} args - Arguments to update or create a Staff.
     * @example
     * // Update or create a Staff
     * const staff = await prisma.staff.upsert({
     *   create: {
     *     // ... data to create a Staff
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Staff we want to update
     *   }
     * })
    **/
    upsert<T extends StaffUpsertArgs>(
      args: SelectSubset<T, StaffUpsertArgs>
    ): CheckSelect<T, Prisma__StaffClient<Staff>, Prisma__StaffClient<StaffGetPayload<T>>>

    /**
     * Find one Staff that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {StaffFindUniqueOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StaffFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, StaffFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__StaffClient<Staff>, Prisma__StaffClient<StaffGetPayload<T>>>

    /**
     * Find the first Staff that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindFirstOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StaffFindFirstOrThrowArgs>(
      args?: SelectSubset<T, StaffFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__StaffClient<Staff>, Prisma__StaffClient<StaffGetPayload<T>>>

    /**
     * Count the number of Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffCountArgs} args - Arguments to filter Staff to count.
     * @example
     * // Count the number of Staff
     * const count = await prisma.staff.count({
     *   where: {
     *     // ... the filter for the Staff we want to count
     *   }
     * })
    **/
    count<T extends StaffCountArgs>(
      args?: Subset<T, StaffCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffAggregateArgs>(args: Subset<T, StaffAggregateArgs>): PrismaPromise<GetStaffAggregateType<T>>

    /**
     * Group by Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffGroupByArgs['orderBy'] }
        : { orderBy?: StaffGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Staff.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StaffClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    lecturer<T extends LecturerArgs = {}>(args?: Subset<T, LecturerArgs>): CheckSelect<T, Prisma__LecturerClient<Lecturer | Null>, Prisma__LecturerClient<LecturerGetPayload<T> | Null>>;

    admin<T extends AdminArgs = {}>(args?: Subset<T, AdminArgs>): CheckSelect<T, Prisma__AdminClient<Admin | Null>, Prisma__AdminClient<AdminGetPayload<T> | Null>>;

    Course<T extends CourseFindManyArgs = {}>(args?: Subset<T, CourseFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Course>| Null>, PrismaPromise<Array<CourseGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Staff base type for findUnique actions
   */
  export type StaffFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Staff
     * 
    **/
    select?: StaffSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StaffInclude | null
    /**
     * Filter, which Staff to fetch.
     * 
    **/
    where: StaffWhereUniqueInput
  }

  /**
   * Staff: findUnique
   */
  export interface StaffFindUniqueArgs extends StaffFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Staff base type for findFirst actions
   */
  export type StaffFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Staff
     * 
    **/
    select?: StaffSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StaffInclude | null
    /**
     * Filter, which Staff to fetch.
     * 
    **/
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     * 
    **/
    orderBy?: Enumerable<StaffOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Staff.
     * 
    **/
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Staff.
     * 
    **/
    distinct?: Enumerable<StaffScalarFieldEnum>
  }

  /**
   * Staff: findFirst
   */
  export interface StaffFindFirstArgs extends StaffFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Staff findMany
   */
  export type StaffFindManyArgs = {
    /**
     * Select specific fields to fetch from the Staff
     * 
    **/
    select?: StaffSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StaffInclude | null
    /**
     * Filter, which Staff to fetch.
     * 
    **/
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     * 
    **/
    orderBy?: Enumerable<StaffOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Staff.
     * 
    **/
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StaffScalarFieldEnum>
  }


  /**
   * Staff create
   */
  export type StaffCreateArgs = {
    /**
     * Select specific fields to fetch from the Staff
     * 
    **/
    select?: StaffSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StaffInclude | null
    /**
     * The data needed to create a Staff.
     * 
    **/
    data: XOR<StaffCreateInput, StaffUncheckedCreateInput>
  }


  /**
   * Staff createMany
   */
  export type StaffCreateManyArgs = {
    /**
     * The data used to create many Staff.
     * 
    **/
    data: Enumerable<StaffCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Staff update
   */
  export type StaffUpdateArgs = {
    /**
     * Select specific fields to fetch from the Staff
     * 
    **/
    select?: StaffSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StaffInclude | null
    /**
     * The data needed to update a Staff.
     * 
    **/
    data: XOR<StaffUpdateInput, StaffUncheckedUpdateInput>
    /**
     * Choose, which Staff to update.
     * 
    **/
    where: StaffWhereUniqueInput
  }


  /**
   * Staff updateMany
   */
  export type StaffUpdateManyArgs = {
    /**
     * The data used to update Staff.
     * 
    **/
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyInput>
    /**
     * Filter which Staff to update
     * 
    **/
    where?: StaffWhereInput
  }


  /**
   * Staff upsert
   */
  export type StaffUpsertArgs = {
    /**
     * Select specific fields to fetch from the Staff
     * 
    **/
    select?: StaffSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StaffInclude | null
    /**
     * The filter to search for the Staff to update in case it exists.
     * 
    **/
    where: StaffWhereUniqueInput
    /**
     * In case the Staff found by the `where` argument doesn't exist, create a new Staff with this data.
     * 
    **/
    create: XOR<StaffCreateInput, StaffUncheckedCreateInput>
    /**
     * In case the Staff was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StaffUpdateInput, StaffUncheckedUpdateInput>
  }


  /**
   * Staff delete
   */
  export type StaffDeleteArgs = {
    /**
     * Select specific fields to fetch from the Staff
     * 
    **/
    select?: StaffSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StaffInclude | null
    /**
     * Filter which Staff to delete.
     * 
    **/
    where: StaffWhereUniqueInput
  }


  /**
   * Staff deleteMany
   */
  export type StaffDeleteManyArgs = {
    /**
     * Filter which Staff to delete
     * 
    **/
    where?: StaffWhereInput
  }


  /**
   * Staff: findUniqueOrThrow
   */
  export type StaffFindUniqueOrThrowArgs = StaffFindUniqueArgsBase
      

  /**
   * Staff: findFirstOrThrow
   */
  export type StaffFindFirstOrThrowArgs = StaffFindFirstArgsBase
      

  /**
   * Staff without action
   */
  export type StaffArgs = {
    /**
     * Select specific fields to fetch from the Staff
     * 
    **/
    select?: StaffSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StaffInclude | null
  }



  /**
   * Model Lecturer
   */


  export type AggregateLecturer = {
    _count: LecturerCountAggregateOutputType | null
    _avg: LecturerAvgAggregateOutputType | null
    _sum: LecturerSumAggregateOutputType | null
    _min: LecturerMinAggregateOutputType | null
    _max: LecturerMaxAggregateOutputType | null
  }

  export type LecturerAvgAggregateOutputType = {
    id: number | null
  }

  export type LecturerSumAggregateOutputType = {
    id: number | null
  }

  export type LecturerMinAggregateOutputType = {
    id: number | null
    staffNo: string | null
    faculty: string | null
    department: string | null
    approved: boolean | null
    unit: string | null
  }

  export type LecturerMaxAggregateOutputType = {
    id: number | null
    staffNo: string | null
    faculty: string | null
    department: string | null
    approved: boolean | null
    unit: string | null
  }

  export type LecturerCountAggregateOutputType = {
    id: number
    staffNo: number
    faculty: number
    department: number
    approved: number
    unit: number
    _all: number
  }


  export type LecturerAvgAggregateInputType = {
    id?: true
  }

  export type LecturerSumAggregateInputType = {
    id?: true
  }

  export type LecturerMinAggregateInputType = {
    id?: true
    staffNo?: true
    faculty?: true
    department?: true
    approved?: true
    unit?: true
  }

  export type LecturerMaxAggregateInputType = {
    id?: true
    staffNo?: true
    faculty?: true
    department?: true
    approved?: true
    unit?: true
  }

  export type LecturerCountAggregateInputType = {
    id?: true
    staffNo?: true
    faculty?: true
    department?: true
    approved?: true
    unit?: true
    _all?: true
  }

  export type LecturerAggregateArgs = {
    /**
     * Filter which Lecturer to aggregate.
     * 
    **/
    where?: LecturerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lecturers to fetch.
     * 
    **/
    orderBy?: Enumerable<LecturerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: LecturerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lecturers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lecturers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lecturers
    **/
    _count?: true | LecturerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LecturerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LecturerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LecturerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LecturerMaxAggregateInputType
  }

  export type GetLecturerAggregateType<T extends LecturerAggregateArgs> = {
        [P in keyof T & keyof AggregateLecturer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLecturer[P]>
      : GetScalarType<T[P], AggregateLecturer[P]>
  }




  export type LecturerGroupByArgs = {
    where?: LecturerWhereInput
    orderBy?: Enumerable<LecturerOrderByWithAggregationInput>
    by: Array<LecturerScalarFieldEnum>
    having?: LecturerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LecturerCountAggregateInputType | true
    _avg?: LecturerAvgAggregateInputType
    _sum?: LecturerSumAggregateInputType
    _min?: LecturerMinAggregateInputType
    _max?: LecturerMaxAggregateInputType
  }


  export type LecturerGroupByOutputType = {
    id: number
    staffNo: string
    faculty: string
    department: string
    approved: boolean
    unit: string
    _count: LecturerCountAggregateOutputType | null
    _avg: LecturerAvgAggregateOutputType | null
    _sum: LecturerSumAggregateOutputType | null
    _min: LecturerMinAggregateOutputType | null
    _max: LecturerMaxAggregateOutputType | null
  }

  type GetLecturerGroupByPayload<T extends LecturerGroupByArgs> = PrismaPromise<
    Array<
      PickArray<LecturerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LecturerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LecturerGroupByOutputType[P]>
            : GetScalarType<T[P], LecturerGroupByOutputType[P]>
        }
      >
    >


  export type LecturerSelect = {
    id?: boolean
    staffNo?: boolean
    faculty?: boolean
    department?: boolean
    approved?: boolean
    unit?: boolean
    staff?: boolean | StaffArgs
    courses?: boolean | CourseFindManyArgs
    _count?: boolean | LecturerCountOutputTypeArgs
  }

  export type LecturerInclude = {
    staff?: boolean | StaffArgs
    courses?: boolean | CourseFindManyArgs
    _count?: boolean | LecturerCountOutputTypeArgs
  }

  export type LecturerGetPayload<
    S extends boolean | null | undefined | LecturerArgs,
    U = keyof S
      > = S extends true
        ? Lecturer
    : S extends undefined
    ? never
    : S extends LecturerArgs | LecturerFindManyArgs
    ?'include' extends U
    ? Lecturer  & {
    [P in TrueKeys<S['include']>]:
        P extends 'staff' ? StaffGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'courses' ? Array < CourseGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? LecturerCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'staff' ? StaffGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'courses' ? Array < CourseGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? LecturerCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Lecturer ? Lecturer[P] : never
  } 
    : Lecturer
  : Lecturer


  type LecturerCountArgs = Merge<
    Omit<LecturerFindManyArgs, 'select' | 'include'> & {
      select?: LecturerCountAggregateInputType | true
    }
  >

  export interface LecturerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Lecturer that matches the filter.
     * @param {LecturerFindUniqueArgs} args - Arguments to find a Lecturer
     * @example
     * // Get one Lecturer
     * const lecturer = await prisma.lecturer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LecturerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LecturerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Lecturer'> extends True ? CheckSelect<T, Prisma__LecturerClient<Lecturer>, Prisma__LecturerClient<LecturerGetPayload<T>>> : CheckSelect<T, Prisma__LecturerClient<Lecturer | null, null>, Prisma__LecturerClient<LecturerGetPayload<T> | null, null>>

    /**
     * Find the first Lecturer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LecturerFindFirstArgs} args - Arguments to find a Lecturer
     * @example
     * // Get one Lecturer
     * const lecturer = await prisma.lecturer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LecturerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LecturerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Lecturer'> extends True ? CheckSelect<T, Prisma__LecturerClient<Lecturer>, Prisma__LecturerClient<LecturerGetPayload<T>>> : CheckSelect<T, Prisma__LecturerClient<Lecturer | null, null>, Prisma__LecturerClient<LecturerGetPayload<T> | null, null>>

    /**
     * Find zero or more Lecturers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LecturerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lecturers
     * const lecturers = await prisma.lecturer.findMany()
     * 
     * // Get first 10 Lecturers
     * const lecturers = await prisma.lecturer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lecturerWithIdOnly = await prisma.lecturer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LecturerFindManyArgs>(
      args?: SelectSubset<T, LecturerFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Lecturer>>, PrismaPromise<Array<LecturerGetPayload<T>>>>

    /**
     * Create a Lecturer.
     * @param {LecturerCreateArgs} args - Arguments to create a Lecturer.
     * @example
     * // Create one Lecturer
     * const Lecturer = await prisma.lecturer.create({
     *   data: {
     *     // ... data to create a Lecturer
     *   }
     * })
     * 
    **/
    create<T extends LecturerCreateArgs>(
      args: SelectSubset<T, LecturerCreateArgs>
    ): CheckSelect<T, Prisma__LecturerClient<Lecturer>, Prisma__LecturerClient<LecturerGetPayload<T>>>

    /**
     * Create many Lecturers.
     *     @param {LecturerCreateManyArgs} args - Arguments to create many Lecturers.
     *     @example
     *     // Create many Lecturers
     *     const lecturer = await prisma.lecturer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LecturerCreateManyArgs>(
      args?: SelectSubset<T, LecturerCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Lecturer.
     * @param {LecturerDeleteArgs} args - Arguments to delete one Lecturer.
     * @example
     * // Delete one Lecturer
     * const Lecturer = await prisma.lecturer.delete({
     *   where: {
     *     // ... filter to delete one Lecturer
     *   }
     * })
     * 
    **/
    delete<T extends LecturerDeleteArgs>(
      args: SelectSubset<T, LecturerDeleteArgs>
    ): CheckSelect<T, Prisma__LecturerClient<Lecturer>, Prisma__LecturerClient<LecturerGetPayload<T>>>

    /**
     * Update one Lecturer.
     * @param {LecturerUpdateArgs} args - Arguments to update one Lecturer.
     * @example
     * // Update one Lecturer
     * const lecturer = await prisma.lecturer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LecturerUpdateArgs>(
      args: SelectSubset<T, LecturerUpdateArgs>
    ): CheckSelect<T, Prisma__LecturerClient<Lecturer>, Prisma__LecturerClient<LecturerGetPayload<T>>>

    /**
     * Delete zero or more Lecturers.
     * @param {LecturerDeleteManyArgs} args - Arguments to filter Lecturers to delete.
     * @example
     * // Delete a few Lecturers
     * const { count } = await prisma.lecturer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LecturerDeleteManyArgs>(
      args?: SelectSubset<T, LecturerDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lecturers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LecturerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lecturers
     * const lecturer = await prisma.lecturer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LecturerUpdateManyArgs>(
      args: SelectSubset<T, LecturerUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Lecturer.
     * @param {LecturerUpsertArgs} args - Arguments to update or create a Lecturer.
     * @example
     * // Update or create a Lecturer
     * const lecturer = await prisma.lecturer.upsert({
     *   create: {
     *     // ... data to create a Lecturer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lecturer we want to update
     *   }
     * })
    **/
    upsert<T extends LecturerUpsertArgs>(
      args: SelectSubset<T, LecturerUpsertArgs>
    ): CheckSelect<T, Prisma__LecturerClient<Lecturer>, Prisma__LecturerClient<LecturerGetPayload<T>>>

    /**
     * Find one Lecturer that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {LecturerFindUniqueOrThrowArgs} args - Arguments to find a Lecturer
     * @example
     * // Get one Lecturer
     * const lecturer = await prisma.lecturer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LecturerFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LecturerFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__LecturerClient<Lecturer>, Prisma__LecturerClient<LecturerGetPayload<T>>>

    /**
     * Find the first Lecturer that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LecturerFindFirstOrThrowArgs} args - Arguments to find a Lecturer
     * @example
     * // Get one Lecturer
     * const lecturer = await prisma.lecturer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LecturerFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LecturerFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__LecturerClient<Lecturer>, Prisma__LecturerClient<LecturerGetPayload<T>>>

    /**
     * Count the number of Lecturers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LecturerCountArgs} args - Arguments to filter Lecturers to count.
     * @example
     * // Count the number of Lecturers
     * const count = await prisma.lecturer.count({
     *   where: {
     *     // ... the filter for the Lecturers we want to count
     *   }
     * })
    **/
    count<T extends LecturerCountArgs>(
      args?: Subset<T, LecturerCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LecturerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lecturer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LecturerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LecturerAggregateArgs>(args: Subset<T, LecturerAggregateArgs>): PrismaPromise<GetLecturerAggregateType<T>>

    /**
     * Group by Lecturer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LecturerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LecturerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LecturerGroupByArgs['orderBy'] }
        : { orderBy?: LecturerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LecturerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLecturerGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Lecturer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LecturerClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    staff<T extends StaffArgs = {}>(args?: Subset<T, StaffArgs>): CheckSelect<T, Prisma__StaffClient<Staff | Null>, Prisma__StaffClient<StaffGetPayload<T> | Null>>;

    courses<T extends CourseFindManyArgs = {}>(args?: Subset<T, CourseFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Course>| Null>, PrismaPromise<Array<CourseGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Lecturer base type for findUnique actions
   */
  export type LecturerFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Lecturer
     * 
    **/
    select?: LecturerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LecturerInclude | null
    /**
     * Filter, which Lecturer to fetch.
     * 
    **/
    where: LecturerWhereUniqueInput
  }

  /**
   * Lecturer: findUnique
   */
  export interface LecturerFindUniqueArgs extends LecturerFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Lecturer base type for findFirst actions
   */
  export type LecturerFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Lecturer
     * 
    **/
    select?: LecturerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LecturerInclude | null
    /**
     * Filter, which Lecturer to fetch.
     * 
    **/
    where?: LecturerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lecturers to fetch.
     * 
    **/
    orderBy?: Enumerable<LecturerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lecturers.
     * 
    **/
    cursor?: LecturerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lecturers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lecturers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lecturers.
     * 
    **/
    distinct?: Enumerable<LecturerScalarFieldEnum>
  }

  /**
   * Lecturer: findFirst
   */
  export interface LecturerFindFirstArgs extends LecturerFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Lecturer findMany
   */
  export type LecturerFindManyArgs = {
    /**
     * Select specific fields to fetch from the Lecturer
     * 
    **/
    select?: LecturerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LecturerInclude | null
    /**
     * Filter, which Lecturers to fetch.
     * 
    **/
    where?: LecturerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lecturers to fetch.
     * 
    **/
    orderBy?: Enumerable<LecturerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lecturers.
     * 
    **/
    cursor?: LecturerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lecturers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lecturers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<LecturerScalarFieldEnum>
  }


  /**
   * Lecturer create
   */
  export type LecturerCreateArgs = {
    /**
     * Select specific fields to fetch from the Lecturer
     * 
    **/
    select?: LecturerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LecturerInclude | null
    /**
     * The data needed to create a Lecturer.
     * 
    **/
    data: XOR<LecturerCreateInput, LecturerUncheckedCreateInput>
  }


  /**
   * Lecturer createMany
   */
  export type LecturerCreateManyArgs = {
    /**
     * The data used to create many Lecturers.
     * 
    **/
    data: Enumerable<LecturerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Lecturer update
   */
  export type LecturerUpdateArgs = {
    /**
     * Select specific fields to fetch from the Lecturer
     * 
    **/
    select?: LecturerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LecturerInclude | null
    /**
     * The data needed to update a Lecturer.
     * 
    **/
    data: XOR<LecturerUpdateInput, LecturerUncheckedUpdateInput>
    /**
     * Choose, which Lecturer to update.
     * 
    **/
    where: LecturerWhereUniqueInput
  }


  /**
   * Lecturer updateMany
   */
  export type LecturerUpdateManyArgs = {
    /**
     * The data used to update Lecturers.
     * 
    **/
    data: XOR<LecturerUpdateManyMutationInput, LecturerUncheckedUpdateManyInput>
    /**
     * Filter which Lecturers to update
     * 
    **/
    where?: LecturerWhereInput
  }


  /**
   * Lecturer upsert
   */
  export type LecturerUpsertArgs = {
    /**
     * Select specific fields to fetch from the Lecturer
     * 
    **/
    select?: LecturerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LecturerInclude | null
    /**
     * The filter to search for the Lecturer to update in case it exists.
     * 
    **/
    where: LecturerWhereUniqueInput
    /**
     * In case the Lecturer found by the `where` argument doesn't exist, create a new Lecturer with this data.
     * 
    **/
    create: XOR<LecturerCreateInput, LecturerUncheckedCreateInput>
    /**
     * In case the Lecturer was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<LecturerUpdateInput, LecturerUncheckedUpdateInput>
  }


  /**
   * Lecturer delete
   */
  export type LecturerDeleteArgs = {
    /**
     * Select specific fields to fetch from the Lecturer
     * 
    **/
    select?: LecturerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LecturerInclude | null
    /**
     * Filter which Lecturer to delete.
     * 
    **/
    where: LecturerWhereUniqueInput
  }


  /**
   * Lecturer deleteMany
   */
  export type LecturerDeleteManyArgs = {
    /**
     * Filter which Lecturers to delete
     * 
    **/
    where?: LecturerWhereInput
  }


  /**
   * Lecturer: findUniqueOrThrow
   */
  export type LecturerFindUniqueOrThrowArgs = LecturerFindUniqueArgsBase
      

  /**
   * Lecturer: findFirstOrThrow
   */
  export type LecturerFindFirstOrThrowArgs = LecturerFindFirstArgsBase
      

  /**
   * Lecturer without action
   */
  export type LecturerArgs = {
    /**
     * Select specific fields to fetch from the Lecturer
     * 
    **/
    select?: LecturerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LecturerInclude | null
  }



  /**
   * Model Admin
   */


  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    id: number | null
  }

  export type AdminSumAggregateOutputType = {
    id: number | null
  }

  export type AdminMinAggregateOutputType = {
    id: number | null
    username: string | null
    staffNo: string | null
  }

  export type AdminMaxAggregateOutputType = {
    id: number | null
    username: string | null
    staffNo: string | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    username: number
    staffNo: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    id?: true
  }

  export type AdminSumAggregateInputType = {
    id?: true
  }

  export type AdminMinAggregateInputType = {
    id?: true
    username?: true
    staffNo?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    username?: true
    staffNo?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    username?: true
    staffNo?: true
    _all?: true
  }

  export type AdminAggregateArgs = {
    /**
     * Filter which Admin to aggregate.
     * 
    **/
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     * 
    **/
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs = {
    where?: AdminWhereInput
    orderBy?: Enumerable<AdminOrderByWithAggregationInput>
    by: Array<AdminScalarFieldEnum>
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }


  export type AdminGroupByOutputType = {
    id: number
    username: string
    staffNo: string
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect = {
    id?: boolean
    username?: boolean
    staffNo?: boolean
    staff?: boolean | StaffArgs
  }

  export type AdminInclude = {
    staff?: boolean | StaffArgs
  }

  export type AdminGetPayload<
    S extends boolean | null | undefined | AdminArgs,
    U = keyof S
      > = S extends true
        ? Admin
    : S extends undefined
    ? never
    : S extends AdminArgs | AdminFindManyArgs
    ?'include' extends U
    ? Admin  & {
    [P in TrueKeys<S['include']>]:
        P extends 'staff' ? StaffGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'staff' ? StaffGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Admin ? Admin[P] : never
  } 
    : Admin
  : Admin


  type AdminCountArgs = Merge<
    Omit<AdminFindManyArgs, 'select' | 'include'> & {
      select?: AdminCountAggregateInputType | true
    }
  >

  export interface AdminDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdminFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AdminFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Admin'> extends True ? CheckSelect<T, Prisma__AdminClient<Admin>, Prisma__AdminClient<AdminGetPayload<T>>> : CheckSelect<T, Prisma__AdminClient<Admin | null, null>, Prisma__AdminClient<AdminGetPayload<T> | null, null>>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdminFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AdminFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Admin'> extends True ? CheckSelect<T, Prisma__AdminClient<Admin>, Prisma__AdminClient<AdminGetPayload<T>>> : CheckSelect<T, Prisma__AdminClient<Admin | null, null>, Prisma__AdminClient<AdminGetPayload<T> | null, null>>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdminFindManyArgs>(
      args?: SelectSubset<T, AdminFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Admin>>, PrismaPromise<Array<AdminGetPayload<T>>>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
    **/
    create<T extends AdminCreateArgs>(
      args: SelectSubset<T, AdminCreateArgs>
    ): CheckSelect<T, Prisma__AdminClient<Admin>, Prisma__AdminClient<AdminGetPayload<T>>>

    /**
     * Create many Admins.
     *     @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     *     @example
     *     // Create many Admins
     *     const admin = await prisma.admin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdminCreateManyArgs>(
      args?: SelectSubset<T, AdminCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
    **/
    delete<T extends AdminDeleteArgs>(
      args: SelectSubset<T, AdminDeleteArgs>
    ): CheckSelect<T, Prisma__AdminClient<Admin>, Prisma__AdminClient<AdminGetPayload<T>>>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdminUpdateArgs>(
      args: SelectSubset<T, AdminUpdateArgs>
    ): CheckSelect<T, Prisma__AdminClient<Admin>, Prisma__AdminClient<AdminGetPayload<T>>>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdminDeleteManyArgs>(
      args?: SelectSubset<T, AdminDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdminUpdateManyArgs>(
      args: SelectSubset<T, AdminUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
    **/
    upsert<T extends AdminUpsertArgs>(
      args: SelectSubset<T, AdminUpsertArgs>
    ): CheckSelect<T, Prisma__AdminClient<Admin>, Prisma__AdminClient<AdminGetPayload<T>>>

    /**
     * Find one Admin that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AdminFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__AdminClient<Admin>, Prisma__AdminClient<AdminGetPayload<T>>>

    /**
     * Find the first Admin that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AdminFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__AdminClient<Admin>, Prisma__AdminClient<AdminGetPayload<T>>>

    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AdminClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    staff<T extends StaffArgs = {}>(args?: Subset<T, StaffArgs>): CheckSelect<T, Prisma__StaffClient<Staff | Null>, Prisma__StaffClient<StaffGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Admin base type for findUnique actions
   */
  export type AdminFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminInclude | null
    /**
     * Filter, which Admin to fetch.
     * 
    **/
    where: AdminWhereUniqueInput
  }

  /**
   * Admin: findUnique
   */
  export interface AdminFindUniqueArgs extends AdminFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Admin base type for findFirst actions
   */
  export type AdminFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminInclude | null
    /**
     * Filter, which Admin to fetch.
     * 
    **/
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     * 
    **/
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     * 
    **/
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     * 
    **/
    distinct?: Enumerable<AdminScalarFieldEnum>
  }

  /**
   * Admin: findFirst
   */
  export interface AdminFindFirstArgs extends AdminFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminInclude | null
    /**
     * Filter, which Admins to fetch.
     * 
    **/
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     * 
    **/
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     * 
    **/
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AdminScalarFieldEnum>
  }


  /**
   * Admin create
   */
  export type AdminCreateArgs = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminInclude | null
    /**
     * The data needed to create a Admin.
     * 
    **/
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }


  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs = {
    /**
     * The data used to create many Admins.
     * 
    **/
    data: Enumerable<AdminCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Admin update
   */
  export type AdminUpdateArgs = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminInclude | null
    /**
     * The data needed to update a Admin.
     * 
    **/
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     * 
    **/
    where: AdminWhereUniqueInput
  }


  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs = {
    /**
     * The data used to update Admins.
     * 
    **/
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     * 
    **/
    where?: AdminWhereInput
  }


  /**
   * Admin upsert
   */
  export type AdminUpsertArgs = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminInclude | null
    /**
     * The filter to search for the Admin to update in case it exists.
     * 
    **/
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     * 
    **/
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }


  /**
   * Admin delete
   */
  export type AdminDeleteArgs = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminInclude | null
    /**
     * Filter which Admin to delete.
     * 
    **/
    where: AdminWhereUniqueInput
  }


  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs = {
    /**
     * Filter which Admins to delete
     * 
    **/
    where?: AdminWhereInput
  }


  /**
   * Admin: findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs = AdminFindUniqueArgsBase
      

  /**
   * Admin: findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs = AdminFindFirstArgsBase
      

  /**
   * Admin without action
   */
  export type AdminArgs = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminInclude | null
  }



  /**
   * Model Student
   */


  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    id: number | null
    year: number | null
  }

  export type StudentSumAggregateOutputType = {
    id: number | null
    year: number | null
  }

  export type StudentMinAggregateOutputType = {
    id: number | null
    registrationNumber: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    year: number | null
    approved: boolean | null
    password: string | null
    createdOn: Date | null
    updatedOn: Date | null
  }

  export type StudentMaxAggregateOutputType = {
    id: number | null
    registrationNumber: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    year: number | null
    approved: boolean | null
    password: string | null
    createdOn: Date | null
    updatedOn: Date | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    registrationNumber: number
    firstName: number
    lastName: number
    email: number
    year: number
    approved: number
    password: number
    createdOn: number
    updatedOn: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    id?: true
    year?: true
  }

  export type StudentSumAggregateInputType = {
    id?: true
    year?: true
  }

  export type StudentMinAggregateInputType = {
    id?: true
    registrationNumber?: true
    firstName?: true
    lastName?: true
    email?: true
    year?: true
    approved?: true
    password?: true
    createdOn?: true
    updatedOn?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    registrationNumber?: true
    firstName?: true
    lastName?: true
    email?: true
    year?: true
    approved?: true
    password?: true
    createdOn?: true
    updatedOn?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    registrationNumber?: true
    firstName?: true
    lastName?: true
    email?: true
    year?: true
    approved?: true
    password?: true
    createdOn?: true
    updatedOn?: true
    _all?: true
  }

  export type StudentAggregateArgs = {
    /**
     * Filter which Student to aggregate.
     * 
    **/
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     * 
    **/
    orderBy?: Enumerable<StudentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs = {
    where?: StudentWhereInput
    orderBy?: Enumerable<StudentOrderByWithAggregationInput>
    by: Array<StudentScalarFieldEnum>
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }


  export type StudentGroupByOutputType = {
    id: number
    registrationNumber: string
    firstName: string
    lastName: string
    email: string
    year: number
    approved: boolean
    password: string
    createdOn: Date
    updatedOn: Date
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect = {
    id?: boolean
    registrationNumber?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    year?: boolean
    approved?: boolean
    password?: boolean
    createdOn?: boolean
    updatedOn?: boolean
    registeredUnits?: boolean | RegisteredUnitsFindManyArgs
    _count?: boolean | StudentCountOutputTypeArgs
  }

  export type StudentInclude = {
    registeredUnits?: boolean | RegisteredUnitsFindManyArgs
    _count?: boolean | StudentCountOutputTypeArgs
  }

  export type StudentGetPayload<
    S extends boolean | null | undefined | StudentArgs,
    U = keyof S
      > = S extends true
        ? Student
    : S extends undefined
    ? never
    : S extends StudentArgs | StudentFindManyArgs
    ?'include' extends U
    ? Student  & {
    [P in TrueKeys<S['include']>]:
        P extends 'registeredUnits' ? Array < RegisteredUnitsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? StudentCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'registeredUnits' ? Array < RegisteredUnitsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? StudentCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Student ? Student[P] : never
  } 
    : Student
  : Student


  type StudentCountArgs = Merge<
    Omit<StudentFindManyArgs, 'select' | 'include'> & {
      select?: StudentCountAggregateInputType | true
    }
  >

  export interface StudentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StudentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StudentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Student'> extends True ? CheckSelect<T, Prisma__StudentClient<Student>, Prisma__StudentClient<StudentGetPayload<T>>> : CheckSelect<T, Prisma__StudentClient<Student | null, null>, Prisma__StudentClient<StudentGetPayload<T> | null, null>>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StudentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StudentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Student'> extends True ? CheckSelect<T, Prisma__StudentClient<Student>, Prisma__StudentClient<StudentGetPayload<T>>> : CheckSelect<T, Prisma__StudentClient<Student | null, null>, Prisma__StudentClient<StudentGetPayload<T> | null, null>>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StudentFindManyArgs>(
      args?: SelectSubset<T, StudentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Student>>, PrismaPromise<Array<StudentGetPayload<T>>>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
    **/
    create<T extends StudentCreateArgs>(
      args: SelectSubset<T, StudentCreateArgs>
    ): CheckSelect<T, Prisma__StudentClient<Student>, Prisma__StudentClient<StudentGetPayload<T>>>

    /**
     * Create many Students.
     *     @param {StudentCreateManyArgs} args - Arguments to create many Students.
     *     @example
     *     // Create many Students
     *     const student = await prisma.student.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StudentCreateManyArgs>(
      args?: SelectSubset<T, StudentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
    **/
    delete<T extends StudentDeleteArgs>(
      args: SelectSubset<T, StudentDeleteArgs>
    ): CheckSelect<T, Prisma__StudentClient<Student>, Prisma__StudentClient<StudentGetPayload<T>>>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StudentUpdateArgs>(
      args: SelectSubset<T, StudentUpdateArgs>
    ): CheckSelect<T, Prisma__StudentClient<Student>, Prisma__StudentClient<StudentGetPayload<T>>>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StudentDeleteManyArgs>(
      args?: SelectSubset<T, StudentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StudentUpdateManyArgs>(
      args: SelectSubset<T, StudentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
    **/
    upsert<T extends StudentUpsertArgs>(
      args: SelectSubset<T, StudentUpsertArgs>
    ): CheckSelect<T, Prisma__StudentClient<Student>, Prisma__StudentClient<StudentGetPayload<T>>>

    /**
     * Find one Student that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, StudentFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__StudentClient<Student>, Prisma__StudentClient<StudentGetPayload<T>>>

    /**
     * Find the first Student that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, StudentFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__StudentClient<Student>, Prisma__StudentClient<StudentGetPayload<T>>>

    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StudentClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    registeredUnits<T extends RegisteredUnitsFindManyArgs = {}>(args?: Subset<T, RegisteredUnitsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<RegisteredUnits>| Null>, PrismaPromise<Array<RegisteredUnitsGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Student base type for findUnique actions
   */
  export type StudentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * Filter, which Student to fetch.
     * 
    **/
    where: StudentWhereUniqueInput
  }

  /**
   * Student: findUnique
   */
  export interface StudentFindUniqueArgs extends StudentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Student base type for findFirst actions
   */
  export type StudentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * Filter, which Student to fetch.
     * 
    **/
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     * 
    **/
    orderBy?: Enumerable<StudentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     * 
    **/
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     * 
    **/
    distinct?: Enumerable<StudentScalarFieldEnum>
  }

  /**
   * Student: findFirst
   */
  export interface StudentFindFirstArgs extends StudentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Student findMany
   */
  export type StudentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * Filter, which Students to fetch.
     * 
    **/
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     * 
    **/
    orderBy?: Enumerable<StudentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     * 
    **/
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StudentScalarFieldEnum>
  }


  /**
   * Student create
   */
  export type StudentCreateArgs = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * The data needed to create a Student.
     * 
    **/
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }


  /**
   * Student createMany
   */
  export type StudentCreateManyArgs = {
    /**
     * The data used to create many Students.
     * 
    **/
    data: Enumerable<StudentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Student update
   */
  export type StudentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * The data needed to update a Student.
     * 
    **/
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     * 
    **/
    where: StudentWhereUniqueInput
  }


  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs = {
    /**
     * The data used to update Students.
     * 
    **/
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     * 
    **/
    where?: StudentWhereInput
  }


  /**
   * Student upsert
   */
  export type StudentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * The filter to search for the Student to update in case it exists.
     * 
    **/
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     * 
    **/
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }


  /**
   * Student delete
   */
  export type StudentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * Filter which Student to delete.
     * 
    **/
    where: StudentWhereUniqueInput
  }


  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs = {
    /**
     * Filter which Students to delete
     * 
    **/
    where?: StudentWhereInput
  }


  /**
   * Student: findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs = StudentFindUniqueArgsBase
      

  /**
   * Student: findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs = StudentFindFirstArgsBase
      

  /**
   * Student without action
   */
  export type StudentArgs = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
  }



  /**
   * Model Course
   */


  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    id: number | null
    unit: number | null
    lecturerId: number | null
  }

  export type CourseSumAggregateOutputType = {
    id: number | null
    unit: number | null
    lecturerId: number | null
  }

  export type CourseMinAggregateOutputType = {
    id: number | null
    yearSemester: string | null
    unit: number | null
    updated: Date | null
    staffNo: string | null
    lecturerId: number | null
  }

  export type CourseMaxAggregateOutputType = {
    id: number | null
    yearSemester: string | null
    unit: number | null
    updated: Date | null
    staffNo: string | null
    lecturerId: number | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    yearSemester: number
    unit: number
    updated: number
    staffNo: number
    lecturerId: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    id?: true
    unit?: true
    lecturerId?: true
  }

  export type CourseSumAggregateInputType = {
    id?: true
    unit?: true
    lecturerId?: true
  }

  export type CourseMinAggregateInputType = {
    id?: true
    yearSemester?: true
    unit?: true
    updated?: true
    staffNo?: true
    lecturerId?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    yearSemester?: true
    unit?: true
    updated?: true
    staffNo?: true
    lecturerId?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    yearSemester?: true
    unit?: true
    updated?: true
    staffNo?: true
    lecturerId?: true
    _all?: true
  }

  export type CourseAggregateArgs = {
    /**
     * Filter which Course to aggregate.
     * 
    **/
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     * 
    **/
    orderBy?: Enumerable<CourseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs = {
    where?: CourseWhereInput
    orderBy?: Enumerable<CourseOrderByWithAggregationInput>
    by: Array<CourseScalarFieldEnum>
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }


  export type CourseGroupByOutputType = {
    id: number
    yearSemester: string
    unit: number
    updated: Date
    staffNo: string
    lecturerId: number | null
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect = {
    id?: boolean
    yearSemester?: boolean
    unit?: boolean
    updated?: boolean
    lecturer?: boolean | StaffArgs
    staffNo?: boolean
    Lecturer?: boolean | LecturerArgs
    lecturerId?: boolean
  }

  export type CourseInclude = {
    lecturer?: boolean | StaffArgs
    Lecturer?: boolean | LecturerArgs
  }

  export type CourseGetPayload<
    S extends boolean | null | undefined | CourseArgs,
    U = keyof S
      > = S extends true
        ? Course
    : S extends undefined
    ? never
    : S extends CourseArgs | CourseFindManyArgs
    ?'include' extends U
    ? Course  & {
    [P in TrueKeys<S['include']>]:
        P extends 'lecturer' ? StaffGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'Lecturer' ? LecturerGetPayload<Exclude<S['include'], undefined | null>[P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'lecturer' ? StaffGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'Lecturer' ? LecturerGetPayload<Exclude<S['select'], undefined | null>[P]> | null :  P extends keyof Course ? Course[P] : never
  } 
    : Course
  : Course


  type CourseCountArgs = Merge<
    Omit<CourseFindManyArgs, 'select' | 'include'> & {
      select?: CourseCountAggregateInputType | true
    }
  >

  export interface CourseDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CourseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CourseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Course'> extends True ? CheckSelect<T, Prisma__CourseClient<Course>, Prisma__CourseClient<CourseGetPayload<T>>> : CheckSelect<T, Prisma__CourseClient<Course | null, null>, Prisma__CourseClient<CourseGetPayload<T> | null, null>>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CourseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CourseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Course'> extends True ? CheckSelect<T, Prisma__CourseClient<Course>, Prisma__CourseClient<CourseGetPayload<T>>> : CheckSelect<T, Prisma__CourseClient<Course | null, null>, Prisma__CourseClient<CourseGetPayload<T> | null, null>>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CourseFindManyArgs>(
      args?: SelectSubset<T, CourseFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Course>>, PrismaPromise<Array<CourseGetPayload<T>>>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
    **/
    create<T extends CourseCreateArgs>(
      args: SelectSubset<T, CourseCreateArgs>
    ): CheckSelect<T, Prisma__CourseClient<Course>, Prisma__CourseClient<CourseGetPayload<T>>>

    /**
     * Create many Courses.
     *     @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     *     @example
     *     // Create many Courses
     *     const course = await prisma.course.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CourseCreateManyArgs>(
      args?: SelectSubset<T, CourseCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
    **/
    delete<T extends CourseDeleteArgs>(
      args: SelectSubset<T, CourseDeleteArgs>
    ): CheckSelect<T, Prisma__CourseClient<Course>, Prisma__CourseClient<CourseGetPayload<T>>>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CourseUpdateArgs>(
      args: SelectSubset<T, CourseUpdateArgs>
    ): CheckSelect<T, Prisma__CourseClient<Course>, Prisma__CourseClient<CourseGetPayload<T>>>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CourseDeleteManyArgs>(
      args?: SelectSubset<T, CourseDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CourseUpdateManyArgs>(
      args: SelectSubset<T, CourseUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
    **/
    upsert<T extends CourseUpsertArgs>(
      args: SelectSubset<T, CourseUpsertArgs>
    ): CheckSelect<T, Prisma__CourseClient<Course>, Prisma__CourseClient<CourseGetPayload<T>>>

    /**
     * Find one Course that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CourseFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__CourseClient<Course>, Prisma__CourseClient<CourseGetPayload<T>>>

    /**
     * Find the first Course that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CourseFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__CourseClient<Course>, Prisma__CourseClient<CourseGetPayload<T>>>

    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CourseClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    lecturer<T extends StaffArgs = {}>(args?: Subset<T, StaffArgs>): CheckSelect<T, Prisma__StaffClient<Staff | Null>, Prisma__StaffClient<StaffGetPayload<T> | Null>>;

    Lecturer<T extends LecturerArgs = {}>(args?: Subset<T, LecturerArgs>): CheckSelect<T, Prisma__LecturerClient<Lecturer | Null>, Prisma__LecturerClient<LecturerGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Course base type for findUnique actions
   */
  export type CourseFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Course
     * 
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseInclude | null
    /**
     * Filter, which Course to fetch.
     * 
    **/
    where: CourseWhereUniqueInput
  }

  /**
   * Course: findUnique
   */
  export interface CourseFindUniqueArgs extends CourseFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Course base type for findFirst actions
   */
  export type CourseFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Course
     * 
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseInclude | null
    /**
     * Filter, which Course to fetch.
     * 
    **/
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     * 
    **/
    orderBy?: Enumerable<CourseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     * 
    **/
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     * 
    **/
    distinct?: Enumerable<CourseScalarFieldEnum>
  }

  /**
   * Course: findFirst
   */
  export interface CourseFindFirstArgs extends CourseFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Course findMany
   */
  export type CourseFindManyArgs = {
    /**
     * Select specific fields to fetch from the Course
     * 
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseInclude | null
    /**
     * Filter, which Courses to fetch.
     * 
    **/
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     * 
    **/
    orderBy?: Enumerable<CourseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     * 
    **/
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CourseScalarFieldEnum>
  }


  /**
   * Course create
   */
  export type CourseCreateArgs = {
    /**
     * Select specific fields to fetch from the Course
     * 
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseInclude | null
    /**
     * The data needed to create a Course.
     * 
    **/
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }


  /**
   * Course createMany
   */
  export type CourseCreateManyArgs = {
    /**
     * The data used to create many Courses.
     * 
    **/
    data: Enumerable<CourseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Course update
   */
  export type CourseUpdateArgs = {
    /**
     * Select specific fields to fetch from the Course
     * 
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseInclude | null
    /**
     * The data needed to update a Course.
     * 
    **/
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     * 
    **/
    where: CourseWhereUniqueInput
  }


  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs = {
    /**
     * The data used to update Courses.
     * 
    **/
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     * 
    **/
    where?: CourseWhereInput
  }


  /**
   * Course upsert
   */
  export type CourseUpsertArgs = {
    /**
     * Select specific fields to fetch from the Course
     * 
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseInclude | null
    /**
     * The filter to search for the Course to update in case it exists.
     * 
    **/
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     * 
    **/
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }


  /**
   * Course delete
   */
  export type CourseDeleteArgs = {
    /**
     * Select specific fields to fetch from the Course
     * 
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseInclude | null
    /**
     * Filter which Course to delete.
     * 
    **/
    where: CourseWhereUniqueInput
  }


  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs = {
    /**
     * Filter which Courses to delete
     * 
    **/
    where?: CourseWhereInput
  }


  /**
   * Course: findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs = CourseFindUniqueArgsBase
      

  /**
   * Course: findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs = CourseFindFirstArgsBase
      

  /**
   * Course without action
   */
  export type CourseArgs = {
    /**
     * Select specific fields to fetch from the Course
     * 
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseInclude | null
  }



  /**
   * Model RegisteredUnits
   */


  export type AggregateRegisteredUnits = {
    _count: RegisteredUnitsCountAggregateOutputType | null
    _avg: RegisteredUnitsAvgAggregateOutputType | null
    _sum: RegisteredUnitsSumAggregateOutputType | null
    _min: RegisteredUnitsMinAggregateOutputType | null
    _max: RegisteredUnitsMaxAggregateOutputType | null
  }

  export type RegisteredUnitsAvgAggregateOutputType = {
    id: number | null
    unit: number | null
  }

  export type RegisteredUnitsSumAggregateOutputType = {
    id: number | null
    unit: number | null
  }

  export type RegisteredUnitsMinAggregateOutputType = {
    id: number | null
    unit: number | null
    registrationNumber: string | null
  }

  export type RegisteredUnitsMaxAggregateOutputType = {
    id: number | null
    unit: number | null
    registrationNumber: string | null
  }

  export type RegisteredUnitsCountAggregateOutputType = {
    id: number
    unit: number
    registrationNumber: number
    _all: number
  }


  export type RegisteredUnitsAvgAggregateInputType = {
    id?: true
    unit?: true
  }

  export type RegisteredUnitsSumAggregateInputType = {
    id?: true
    unit?: true
  }

  export type RegisteredUnitsMinAggregateInputType = {
    id?: true
    unit?: true
    registrationNumber?: true
  }

  export type RegisteredUnitsMaxAggregateInputType = {
    id?: true
    unit?: true
    registrationNumber?: true
  }

  export type RegisteredUnitsCountAggregateInputType = {
    id?: true
    unit?: true
    registrationNumber?: true
    _all?: true
  }

  export type RegisteredUnitsAggregateArgs = {
    /**
     * Filter which RegisteredUnits to aggregate.
     * 
    **/
    where?: RegisteredUnitsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegisteredUnits to fetch.
     * 
    **/
    orderBy?: Enumerable<RegisteredUnitsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RegisteredUnitsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegisteredUnits from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegisteredUnits.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RegisteredUnits
    **/
    _count?: true | RegisteredUnitsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RegisteredUnitsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RegisteredUnitsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegisteredUnitsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegisteredUnitsMaxAggregateInputType
  }

  export type GetRegisteredUnitsAggregateType<T extends RegisteredUnitsAggregateArgs> = {
        [P in keyof T & keyof AggregateRegisteredUnits]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegisteredUnits[P]>
      : GetScalarType<T[P], AggregateRegisteredUnits[P]>
  }




  export type RegisteredUnitsGroupByArgs = {
    where?: RegisteredUnitsWhereInput
    orderBy?: Enumerable<RegisteredUnitsOrderByWithAggregationInput>
    by: Array<RegisteredUnitsScalarFieldEnum>
    having?: RegisteredUnitsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegisteredUnitsCountAggregateInputType | true
    _avg?: RegisteredUnitsAvgAggregateInputType
    _sum?: RegisteredUnitsSumAggregateInputType
    _min?: RegisteredUnitsMinAggregateInputType
    _max?: RegisteredUnitsMaxAggregateInputType
  }


  export type RegisteredUnitsGroupByOutputType = {
    id: number
    unit: number
    registrationNumber: string
    _count: RegisteredUnitsCountAggregateOutputType | null
    _avg: RegisteredUnitsAvgAggregateOutputType | null
    _sum: RegisteredUnitsSumAggregateOutputType | null
    _min: RegisteredUnitsMinAggregateOutputType | null
    _max: RegisteredUnitsMaxAggregateOutputType | null
  }

  type GetRegisteredUnitsGroupByPayload<T extends RegisteredUnitsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RegisteredUnitsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegisteredUnitsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegisteredUnitsGroupByOutputType[P]>
            : GetScalarType<T[P], RegisteredUnitsGroupByOutputType[P]>
        }
      >
    >


  export type RegisteredUnitsSelect = {
    id?: boolean
    unit?: boolean
    student?: boolean | StudentArgs
    registrationNumber?: boolean
  }

  export type RegisteredUnitsInclude = {
    student?: boolean | StudentArgs
  }

  export type RegisteredUnitsGetPayload<
    S extends boolean | null | undefined | RegisteredUnitsArgs,
    U = keyof S
      > = S extends true
        ? RegisteredUnits
    : S extends undefined
    ? never
    : S extends RegisteredUnitsArgs | RegisteredUnitsFindManyArgs
    ?'include' extends U
    ? RegisteredUnits  & {
    [P in TrueKeys<S['include']>]:
        P extends 'student' ? StudentGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'student' ? StudentGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof RegisteredUnits ? RegisteredUnits[P] : never
  } 
    : RegisteredUnits
  : RegisteredUnits


  type RegisteredUnitsCountArgs = Merge<
    Omit<RegisteredUnitsFindManyArgs, 'select' | 'include'> & {
      select?: RegisteredUnitsCountAggregateInputType | true
    }
  >

  export interface RegisteredUnitsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one RegisteredUnits that matches the filter.
     * @param {RegisteredUnitsFindUniqueArgs} args - Arguments to find a RegisteredUnits
     * @example
     * // Get one RegisteredUnits
     * const registeredUnits = await prisma.registeredUnits.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RegisteredUnitsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RegisteredUnitsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'RegisteredUnits'> extends True ? CheckSelect<T, Prisma__RegisteredUnitsClient<RegisteredUnits>, Prisma__RegisteredUnitsClient<RegisteredUnitsGetPayload<T>>> : CheckSelect<T, Prisma__RegisteredUnitsClient<RegisteredUnits | null, null>, Prisma__RegisteredUnitsClient<RegisteredUnitsGetPayload<T> | null, null>>

    /**
     * Find the first RegisteredUnits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredUnitsFindFirstArgs} args - Arguments to find a RegisteredUnits
     * @example
     * // Get one RegisteredUnits
     * const registeredUnits = await prisma.registeredUnits.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RegisteredUnitsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RegisteredUnitsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'RegisteredUnits'> extends True ? CheckSelect<T, Prisma__RegisteredUnitsClient<RegisteredUnits>, Prisma__RegisteredUnitsClient<RegisteredUnitsGetPayload<T>>> : CheckSelect<T, Prisma__RegisteredUnitsClient<RegisteredUnits | null, null>, Prisma__RegisteredUnitsClient<RegisteredUnitsGetPayload<T> | null, null>>

    /**
     * Find zero or more RegisteredUnits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredUnitsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RegisteredUnits
     * const registeredUnits = await prisma.registeredUnits.findMany()
     * 
     * // Get first 10 RegisteredUnits
     * const registeredUnits = await prisma.registeredUnits.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const registeredUnitsWithIdOnly = await prisma.registeredUnits.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RegisteredUnitsFindManyArgs>(
      args?: SelectSubset<T, RegisteredUnitsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<RegisteredUnits>>, PrismaPromise<Array<RegisteredUnitsGetPayload<T>>>>

    /**
     * Create a RegisteredUnits.
     * @param {RegisteredUnitsCreateArgs} args - Arguments to create a RegisteredUnits.
     * @example
     * // Create one RegisteredUnits
     * const RegisteredUnits = await prisma.registeredUnits.create({
     *   data: {
     *     // ... data to create a RegisteredUnits
     *   }
     * })
     * 
    **/
    create<T extends RegisteredUnitsCreateArgs>(
      args: SelectSubset<T, RegisteredUnitsCreateArgs>
    ): CheckSelect<T, Prisma__RegisteredUnitsClient<RegisteredUnits>, Prisma__RegisteredUnitsClient<RegisteredUnitsGetPayload<T>>>

    /**
     * Create many RegisteredUnits.
     *     @param {RegisteredUnitsCreateManyArgs} args - Arguments to create many RegisteredUnits.
     *     @example
     *     // Create many RegisteredUnits
     *     const registeredUnits = await prisma.registeredUnits.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RegisteredUnitsCreateManyArgs>(
      args?: SelectSubset<T, RegisteredUnitsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a RegisteredUnits.
     * @param {RegisteredUnitsDeleteArgs} args - Arguments to delete one RegisteredUnits.
     * @example
     * // Delete one RegisteredUnits
     * const RegisteredUnits = await prisma.registeredUnits.delete({
     *   where: {
     *     // ... filter to delete one RegisteredUnits
     *   }
     * })
     * 
    **/
    delete<T extends RegisteredUnitsDeleteArgs>(
      args: SelectSubset<T, RegisteredUnitsDeleteArgs>
    ): CheckSelect<T, Prisma__RegisteredUnitsClient<RegisteredUnits>, Prisma__RegisteredUnitsClient<RegisteredUnitsGetPayload<T>>>

    /**
     * Update one RegisteredUnits.
     * @param {RegisteredUnitsUpdateArgs} args - Arguments to update one RegisteredUnits.
     * @example
     * // Update one RegisteredUnits
     * const registeredUnits = await prisma.registeredUnits.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RegisteredUnitsUpdateArgs>(
      args: SelectSubset<T, RegisteredUnitsUpdateArgs>
    ): CheckSelect<T, Prisma__RegisteredUnitsClient<RegisteredUnits>, Prisma__RegisteredUnitsClient<RegisteredUnitsGetPayload<T>>>

    /**
     * Delete zero or more RegisteredUnits.
     * @param {RegisteredUnitsDeleteManyArgs} args - Arguments to filter RegisteredUnits to delete.
     * @example
     * // Delete a few RegisteredUnits
     * const { count } = await prisma.registeredUnits.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RegisteredUnitsDeleteManyArgs>(
      args?: SelectSubset<T, RegisteredUnitsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more RegisteredUnits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredUnitsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RegisteredUnits
     * const registeredUnits = await prisma.registeredUnits.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RegisteredUnitsUpdateManyArgs>(
      args: SelectSubset<T, RegisteredUnitsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one RegisteredUnits.
     * @param {RegisteredUnitsUpsertArgs} args - Arguments to update or create a RegisteredUnits.
     * @example
     * // Update or create a RegisteredUnits
     * const registeredUnits = await prisma.registeredUnits.upsert({
     *   create: {
     *     // ... data to create a RegisteredUnits
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RegisteredUnits we want to update
     *   }
     * })
    **/
    upsert<T extends RegisteredUnitsUpsertArgs>(
      args: SelectSubset<T, RegisteredUnitsUpsertArgs>
    ): CheckSelect<T, Prisma__RegisteredUnitsClient<RegisteredUnits>, Prisma__RegisteredUnitsClient<RegisteredUnitsGetPayload<T>>>

    /**
     * Find one RegisteredUnits that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {RegisteredUnitsFindUniqueOrThrowArgs} args - Arguments to find a RegisteredUnits
     * @example
     * // Get one RegisteredUnits
     * const registeredUnits = await prisma.registeredUnits.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RegisteredUnitsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RegisteredUnitsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__RegisteredUnitsClient<RegisteredUnits>, Prisma__RegisteredUnitsClient<RegisteredUnitsGetPayload<T>>>

    /**
     * Find the first RegisteredUnits that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredUnitsFindFirstOrThrowArgs} args - Arguments to find a RegisteredUnits
     * @example
     * // Get one RegisteredUnits
     * const registeredUnits = await prisma.registeredUnits.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RegisteredUnitsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RegisteredUnitsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__RegisteredUnitsClient<RegisteredUnits>, Prisma__RegisteredUnitsClient<RegisteredUnitsGetPayload<T>>>

    /**
     * Count the number of RegisteredUnits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredUnitsCountArgs} args - Arguments to filter RegisteredUnits to count.
     * @example
     * // Count the number of RegisteredUnits
     * const count = await prisma.registeredUnits.count({
     *   where: {
     *     // ... the filter for the RegisteredUnits we want to count
     *   }
     * })
    **/
    count<T extends RegisteredUnitsCountArgs>(
      args?: Subset<T, RegisteredUnitsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegisteredUnitsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RegisteredUnits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredUnitsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegisteredUnitsAggregateArgs>(args: Subset<T, RegisteredUnitsAggregateArgs>): PrismaPromise<GetRegisteredUnitsAggregateType<T>>

    /**
     * Group by RegisteredUnits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredUnitsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegisteredUnitsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegisteredUnitsGroupByArgs['orderBy'] }
        : { orderBy?: RegisteredUnitsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegisteredUnitsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegisteredUnitsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for RegisteredUnits.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RegisteredUnitsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    student<T extends StudentArgs = {}>(args?: Subset<T, StudentArgs>): CheckSelect<T, Prisma__StudentClient<Student | Null>, Prisma__StudentClient<StudentGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * RegisteredUnits base type for findUnique actions
   */
  export type RegisteredUnitsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the RegisteredUnits
     * 
    **/
    select?: RegisteredUnitsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RegisteredUnitsInclude | null
    /**
     * Filter, which RegisteredUnits to fetch.
     * 
    **/
    where: RegisteredUnitsWhereUniqueInput
  }

  /**
   * RegisteredUnits: findUnique
   */
  export interface RegisteredUnitsFindUniqueArgs extends RegisteredUnitsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * RegisteredUnits base type for findFirst actions
   */
  export type RegisteredUnitsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the RegisteredUnits
     * 
    **/
    select?: RegisteredUnitsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RegisteredUnitsInclude | null
    /**
     * Filter, which RegisteredUnits to fetch.
     * 
    **/
    where?: RegisteredUnitsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegisteredUnits to fetch.
     * 
    **/
    orderBy?: Enumerable<RegisteredUnitsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RegisteredUnits.
     * 
    **/
    cursor?: RegisteredUnitsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegisteredUnits from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegisteredUnits.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RegisteredUnits.
     * 
    **/
    distinct?: Enumerable<RegisteredUnitsScalarFieldEnum>
  }

  /**
   * RegisteredUnits: findFirst
   */
  export interface RegisteredUnitsFindFirstArgs extends RegisteredUnitsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * RegisteredUnits findMany
   */
  export type RegisteredUnitsFindManyArgs = {
    /**
     * Select specific fields to fetch from the RegisteredUnits
     * 
    **/
    select?: RegisteredUnitsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RegisteredUnitsInclude | null
    /**
     * Filter, which RegisteredUnits to fetch.
     * 
    **/
    where?: RegisteredUnitsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegisteredUnits to fetch.
     * 
    **/
    orderBy?: Enumerable<RegisteredUnitsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RegisteredUnits.
     * 
    **/
    cursor?: RegisteredUnitsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegisteredUnits from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegisteredUnits.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RegisteredUnitsScalarFieldEnum>
  }


  /**
   * RegisteredUnits create
   */
  export type RegisteredUnitsCreateArgs = {
    /**
     * Select specific fields to fetch from the RegisteredUnits
     * 
    **/
    select?: RegisteredUnitsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RegisteredUnitsInclude | null
    /**
     * The data needed to create a RegisteredUnits.
     * 
    **/
    data: XOR<RegisteredUnitsCreateInput, RegisteredUnitsUncheckedCreateInput>
  }


  /**
   * RegisteredUnits createMany
   */
  export type RegisteredUnitsCreateManyArgs = {
    /**
     * The data used to create many RegisteredUnits.
     * 
    **/
    data: Enumerable<RegisteredUnitsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * RegisteredUnits update
   */
  export type RegisteredUnitsUpdateArgs = {
    /**
     * Select specific fields to fetch from the RegisteredUnits
     * 
    **/
    select?: RegisteredUnitsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RegisteredUnitsInclude | null
    /**
     * The data needed to update a RegisteredUnits.
     * 
    **/
    data: XOR<RegisteredUnitsUpdateInput, RegisteredUnitsUncheckedUpdateInput>
    /**
     * Choose, which RegisteredUnits to update.
     * 
    **/
    where: RegisteredUnitsWhereUniqueInput
  }


  /**
   * RegisteredUnits updateMany
   */
  export type RegisteredUnitsUpdateManyArgs = {
    /**
     * The data used to update RegisteredUnits.
     * 
    **/
    data: XOR<RegisteredUnitsUpdateManyMutationInput, RegisteredUnitsUncheckedUpdateManyInput>
    /**
     * Filter which RegisteredUnits to update
     * 
    **/
    where?: RegisteredUnitsWhereInput
  }


  /**
   * RegisteredUnits upsert
   */
  export type RegisteredUnitsUpsertArgs = {
    /**
     * Select specific fields to fetch from the RegisteredUnits
     * 
    **/
    select?: RegisteredUnitsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RegisteredUnitsInclude | null
    /**
     * The filter to search for the RegisteredUnits to update in case it exists.
     * 
    **/
    where: RegisteredUnitsWhereUniqueInput
    /**
     * In case the RegisteredUnits found by the `where` argument doesn't exist, create a new RegisteredUnits with this data.
     * 
    **/
    create: XOR<RegisteredUnitsCreateInput, RegisteredUnitsUncheckedCreateInput>
    /**
     * In case the RegisteredUnits was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RegisteredUnitsUpdateInput, RegisteredUnitsUncheckedUpdateInput>
  }


  /**
   * RegisteredUnits delete
   */
  export type RegisteredUnitsDeleteArgs = {
    /**
     * Select specific fields to fetch from the RegisteredUnits
     * 
    **/
    select?: RegisteredUnitsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RegisteredUnitsInclude | null
    /**
     * Filter which RegisteredUnits to delete.
     * 
    **/
    where: RegisteredUnitsWhereUniqueInput
  }


  /**
   * RegisteredUnits deleteMany
   */
  export type RegisteredUnitsDeleteManyArgs = {
    /**
     * Filter which RegisteredUnits to delete
     * 
    **/
    where?: RegisteredUnitsWhereInput
  }


  /**
   * RegisteredUnits: findUniqueOrThrow
   */
  export type RegisteredUnitsFindUniqueOrThrowArgs = RegisteredUnitsFindUniqueArgsBase
      

  /**
   * RegisteredUnits: findFirstOrThrow
   */
  export type RegisteredUnitsFindFirstOrThrowArgs = RegisteredUnitsFindFirstArgsBase
      

  /**
   * RegisteredUnits without action
   */
  export type RegisteredUnitsArgs = {
    /**
     * Select specific fields to fetch from the RegisteredUnits
     * 
    **/
    select?: RegisteredUnitsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RegisteredUnitsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AdminScalarFieldEnum: {
    id: 'id',
    username: 'username',
    staffNo: 'staffNo'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    yearSemester: 'yearSemester',
    unit: 'unit',
    updated: 'updated',
    staffNo: 'staffNo',
    lecturerId: 'lecturerId'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const LecturerScalarFieldEnum: {
    id: 'id',
    staffNo: 'staffNo',
    faculty: 'faculty',
    department: 'department',
    approved: 'approved',
    unit: 'unit'
  };

  export type LecturerScalarFieldEnum = (typeof LecturerScalarFieldEnum)[keyof typeof LecturerScalarFieldEnum]


  export const RegisteredUnitsScalarFieldEnum: {
    id: 'id',
    unit: 'unit',
    registrationNumber: 'registrationNumber'
  };

  export type RegisteredUnitsScalarFieldEnum = (typeof RegisteredUnitsScalarFieldEnum)[keyof typeof RegisteredUnitsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const StaffScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    staffNo: 'staffNo',
    password: 'password',
    role: 'role'
  };

  export type StaffScalarFieldEnum = (typeof StaffScalarFieldEnum)[keyof typeof StaffScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    id: 'id',
    registrationNumber: 'registrationNumber',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    year: 'year',
    approved: 'approved',
    password: 'password',
    createdOn: 'createdOn',
    updatedOn: 'updatedOn'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type StaffWhereInput = {
    AND?: Enumerable<StaffWhereInput>
    OR?: Enumerable<StaffWhereInput>
    NOT?: Enumerable<StaffWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    email?: StringFilter | string
    staffNo?: StringFilter | string
    password?: StringFilter | string
    role?: StringFilter | string
    lecturer?: XOR<LecturerRelationFilter, LecturerWhereInput> | null
    admin?: XOR<AdminRelationFilter, AdminWhereInput> | null
    Course?: CourseListRelationFilter
  }

  export type StaffOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    staffNo?: SortOrder
    password?: SortOrder
    role?: SortOrder
    lecturer?: LecturerOrderByWithRelationInput
    admin?: AdminOrderByWithRelationInput
    Course?: CourseOrderByRelationAggregateInput
  }

  export type StaffWhereUniqueInput = {
    id?: number
    staffNo?: string
  }

  export type StaffOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    staffNo?: SortOrder
    password?: SortOrder
    role?: SortOrder
    _count?: StaffCountOrderByAggregateInput
    _avg?: StaffAvgOrderByAggregateInput
    _max?: StaffMaxOrderByAggregateInput
    _min?: StaffMinOrderByAggregateInput
    _sum?: StaffSumOrderByAggregateInput
  }

  export type StaffScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StaffScalarWhereWithAggregatesInput>
    OR?: Enumerable<StaffScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StaffScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    staffNo?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    role?: StringWithAggregatesFilter | string
  }

  export type LecturerWhereInput = {
    AND?: Enumerable<LecturerWhereInput>
    OR?: Enumerable<LecturerWhereInput>
    NOT?: Enumerable<LecturerWhereInput>
    id?: IntFilter | number
    staffNo?: StringFilter | string
    faculty?: StringFilter | string
    department?: StringFilter | string
    approved?: BoolFilter | boolean
    unit?: StringFilter | string
    staff?: XOR<StaffRelationFilter, StaffWhereInput>
    courses?: CourseListRelationFilter
  }

  export type LecturerOrderByWithRelationInput = {
    id?: SortOrder
    staffNo?: SortOrder
    faculty?: SortOrder
    department?: SortOrder
    approved?: SortOrder
    unit?: SortOrder
    staff?: StaffOrderByWithRelationInput
    courses?: CourseOrderByRelationAggregateInput
  }

  export type LecturerWhereUniqueInput = {
    id?: number
    staffNo?: string
  }

  export type LecturerOrderByWithAggregationInput = {
    id?: SortOrder
    staffNo?: SortOrder
    faculty?: SortOrder
    department?: SortOrder
    approved?: SortOrder
    unit?: SortOrder
    _count?: LecturerCountOrderByAggregateInput
    _avg?: LecturerAvgOrderByAggregateInput
    _max?: LecturerMaxOrderByAggregateInput
    _min?: LecturerMinOrderByAggregateInput
    _sum?: LecturerSumOrderByAggregateInput
  }

  export type LecturerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LecturerScalarWhereWithAggregatesInput>
    OR?: Enumerable<LecturerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LecturerScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    staffNo?: StringWithAggregatesFilter | string
    faculty?: StringWithAggregatesFilter | string
    department?: StringWithAggregatesFilter | string
    approved?: BoolWithAggregatesFilter | boolean
    unit?: StringWithAggregatesFilter | string
  }

  export type AdminWhereInput = {
    AND?: Enumerable<AdminWhereInput>
    OR?: Enumerable<AdminWhereInput>
    NOT?: Enumerable<AdminWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    staffNo?: StringFilter | string
    staff?: XOR<StaffRelationFilter, StaffWhereInput>
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    staffNo?: SortOrder
    staff?: StaffOrderByWithRelationInput
  }

  export type AdminWhereUniqueInput = {
    id?: number
    username?: string
    staffNo?: string
  }

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    staffNo?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AdminScalarWhereWithAggregatesInput>
    OR?: Enumerable<AdminScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AdminScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    staffNo?: StringWithAggregatesFilter | string
  }

  export type StudentWhereInput = {
    AND?: Enumerable<StudentWhereInput>
    OR?: Enumerable<StudentWhereInput>
    NOT?: Enumerable<StudentWhereInput>
    id?: IntFilter | number
    registrationNumber?: StringFilter | string
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    email?: StringFilter | string
    year?: IntFilter | number
    approved?: BoolFilter | boolean
    password?: StringFilter | string
    createdOn?: DateTimeFilter | Date | string
    updatedOn?: DateTimeFilter | Date | string
    registeredUnits?: RegisteredUnitsListRelationFilter
  }

  export type StudentOrderByWithRelationInput = {
    id?: SortOrder
    registrationNumber?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    year?: SortOrder
    approved?: SortOrder
    password?: SortOrder
    createdOn?: SortOrder
    updatedOn?: SortOrder
    registeredUnits?: RegisteredUnitsOrderByRelationAggregateInput
  }

  export type StudentWhereUniqueInput = {
    id?: number
    registrationNumber?: string
  }

  export type StudentOrderByWithAggregationInput = {
    id?: SortOrder
    registrationNumber?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    year?: SortOrder
    approved?: SortOrder
    password?: SortOrder
    createdOn?: SortOrder
    updatedOn?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StudentScalarWhereWithAggregatesInput>
    OR?: Enumerable<StudentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StudentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    registrationNumber?: StringWithAggregatesFilter | string
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    year?: IntWithAggregatesFilter | number
    approved?: BoolWithAggregatesFilter | boolean
    password?: StringWithAggregatesFilter | string
    createdOn?: DateTimeWithAggregatesFilter | Date | string
    updatedOn?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CourseWhereInput = {
    AND?: Enumerable<CourseWhereInput>
    OR?: Enumerable<CourseWhereInput>
    NOT?: Enumerable<CourseWhereInput>
    id?: IntFilter | number
    yearSemester?: StringFilter | string
    unit?: IntFilter | number
    updated?: DateTimeFilter | Date | string
    lecturer?: XOR<StaffRelationFilter, StaffWhereInput>
    staffNo?: StringFilter | string
    Lecturer?: XOR<LecturerRelationFilter, LecturerWhereInput> | null
    lecturerId?: IntNullableFilter | number | null
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    yearSemester?: SortOrder
    unit?: SortOrder
    updated?: SortOrder
    lecturer?: StaffOrderByWithRelationInput
    staffNo?: SortOrder
    Lecturer?: LecturerOrderByWithRelationInput
    lecturerId?: SortOrder
  }

  export type CourseWhereUniqueInput = {
    id?: number
  }

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    yearSemester?: SortOrder
    unit?: SortOrder
    updated?: SortOrder
    staffNo?: SortOrder
    lecturerId?: SortOrder
    _count?: CourseCountOrderByAggregateInput
    _avg?: CourseAvgOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
    _sum?: CourseSumOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CourseScalarWhereWithAggregatesInput>
    OR?: Enumerable<CourseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CourseScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    yearSemester?: StringWithAggregatesFilter | string
    unit?: IntWithAggregatesFilter | number
    updated?: DateTimeWithAggregatesFilter | Date | string
    staffNo?: StringWithAggregatesFilter | string
    lecturerId?: IntNullableWithAggregatesFilter | number | null
  }

  export type RegisteredUnitsWhereInput = {
    AND?: Enumerable<RegisteredUnitsWhereInput>
    OR?: Enumerable<RegisteredUnitsWhereInput>
    NOT?: Enumerable<RegisteredUnitsWhereInput>
    id?: IntFilter | number
    unit?: IntFilter | number
    student?: XOR<StudentRelationFilter, StudentWhereInput>
    registrationNumber?: StringFilter | string
  }

  export type RegisteredUnitsOrderByWithRelationInput = {
    id?: SortOrder
    unit?: SortOrder
    student?: StudentOrderByWithRelationInput
    registrationNumber?: SortOrder
  }

  export type RegisteredUnitsWhereUniqueInput = {
    id?: number
  }

  export type RegisteredUnitsOrderByWithAggregationInput = {
    id?: SortOrder
    unit?: SortOrder
    registrationNumber?: SortOrder
    _count?: RegisteredUnitsCountOrderByAggregateInput
    _avg?: RegisteredUnitsAvgOrderByAggregateInput
    _max?: RegisteredUnitsMaxOrderByAggregateInput
    _min?: RegisteredUnitsMinOrderByAggregateInput
    _sum?: RegisteredUnitsSumOrderByAggregateInput
  }

  export type RegisteredUnitsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RegisteredUnitsScalarWhereWithAggregatesInput>
    OR?: Enumerable<RegisteredUnitsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RegisteredUnitsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    unit?: IntWithAggregatesFilter | number
    registrationNumber?: StringWithAggregatesFilter | string
  }

  export type StaffCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    staffNo: string
    password: string
    role: string
    lecturer?: LecturerCreateNestedOneWithoutStaffInput
    admin?: AdminCreateNestedOneWithoutStaffInput
    Course?: CourseCreateNestedManyWithoutLecturerInput
  }

  export type StaffUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    staffNo: string
    password: string
    role: string
    lecturer?: LecturerUncheckedCreateNestedOneWithoutStaffInput
    admin?: AdminUncheckedCreateNestedOneWithoutStaffInput
    Course?: CourseUncheckedCreateNestedManyWithoutLecturerInput
  }

  export type StaffUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    staffNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lecturer?: LecturerUpdateOneWithoutStaffNestedInput
    admin?: AdminUpdateOneWithoutStaffNestedInput
    Course?: CourseUpdateManyWithoutLecturerNestedInput
  }

  export type StaffUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    staffNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lecturer?: LecturerUncheckedUpdateOneWithoutStaffNestedInput
    admin?: AdminUncheckedUpdateOneWithoutStaffNestedInput
    Course?: CourseUncheckedUpdateManyWithoutLecturerNestedInput
  }

  export type StaffCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    staffNo: string
    password: string
    role: string
  }

  export type StaffUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    staffNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type StaffUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    staffNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type LecturerCreateInput = {
    faculty: string
    department: string
    approved: boolean
    unit: string
    staff: StaffCreateNestedOneWithoutLecturerInput
    courses?: CourseCreateNestedManyWithoutLecturerInput
  }

  export type LecturerUncheckedCreateInput = {
    id?: number
    staffNo: string
    faculty: string
    department: string
    approved: boolean
    unit: string
    courses?: CourseUncheckedCreateNestedManyWithoutLecturerInput
  }

  export type LecturerUpdateInput = {
    faculty?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    unit?: StringFieldUpdateOperationsInput | string
    staff?: StaffUpdateOneRequiredWithoutLecturerNestedInput
    courses?: CourseUpdateManyWithoutLecturerNestedInput
  }

  export type LecturerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    staffNo?: StringFieldUpdateOperationsInput | string
    faculty?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    unit?: StringFieldUpdateOperationsInput | string
    courses?: CourseUncheckedUpdateManyWithoutLecturerNestedInput
  }

  export type LecturerCreateManyInput = {
    id?: number
    staffNo: string
    faculty: string
    department: string
    approved: boolean
    unit: string
  }

  export type LecturerUpdateManyMutationInput = {
    faculty?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    unit?: StringFieldUpdateOperationsInput | string
  }

  export type LecturerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    staffNo?: StringFieldUpdateOperationsInput | string
    faculty?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    unit?: StringFieldUpdateOperationsInput | string
  }

  export type AdminCreateInput = {
    username: string
    staff: StaffCreateNestedOneWithoutAdminInput
  }

  export type AdminUncheckedCreateInput = {
    id?: number
    username: string
    staffNo: string
  }

  export type AdminUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    staff?: StaffUpdateOneRequiredWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    staffNo?: StringFieldUpdateOperationsInput | string
  }

  export type AdminCreateManyInput = {
    id?: number
    username: string
    staffNo: string
  }

  export type AdminUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    staffNo?: StringFieldUpdateOperationsInput | string
  }

  export type StudentCreateInput = {
    registrationNumber: string
    firstName: string
    lastName: string
    email: string
    year: number
    approved: boolean
    password: string
    createdOn?: Date | string
    updatedOn?: Date | string
    registeredUnits?: RegisteredUnitsCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateInput = {
    id?: number
    registrationNumber: string
    firstName: string
    lastName: string
    email: string
    year: number
    approved: boolean
    password: string
    createdOn?: Date | string
    updatedOn?: Date | string
    registeredUnits?: RegisteredUnitsUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentUpdateInput = {
    registrationNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    approved?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    registeredUnits?: RegisteredUnitsUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    registrationNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    approved?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    registeredUnits?: RegisteredUnitsUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateManyInput = {
    id?: number
    registrationNumber: string
    firstName: string
    lastName: string
    email: string
    year: number
    approved: boolean
    password: string
    createdOn?: Date | string
    updatedOn?: Date | string
  }

  export type StudentUpdateManyMutationInput = {
    registrationNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    approved?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    registrationNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    approved?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseCreateInput = {
    yearSemester: string
    unit: number
    updated?: Date | string
    lecturer: StaffCreateNestedOneWithoutCourseInput
    Lecturer?: LecturerCreateNestedOneWithoutCoursesInput
  }

  export type CourseUncheckedCreateInput = {
    id?: number
    yearSemester: string
    unit: number
    updated?: Date | string
    staffNo: string
    lecturerId?: number | null
  }

  export type CourseUpdateInput = {
    yearSemester?: StringFieldUpdateOperationsInput | string
    unit?: IntFieldUpdateOperationsInput | number
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    lecturer?: StaffUpdateOneRequiredWithoutCourseNestedInput
    Lecturer?: LecturerUpdateOneWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    yearSemester?: StringFieldUpdateOperationsInput | string
    unit?: IntFieldUpdateOperationsInput | number
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    staffNo?: StringFieldUpdateOperationsInput | string
    lecturerId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CourseCreateManyInput = {
    id?: number
    yearSemester: string
    unit: number
    updated?: Date | string
    staffNo: string
    lecturerId?: number | null
  }

  export type CourseUpdateManyMutationInput = {
    yearSemester?: StringFieldUpdateOperationsInput | string
    unit?: IntFieldUpdateOperationsInput | number
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    yearSemester?: StringFieldUpdateOperationsInput | string
    unit?: IntFieldUpdateOperationsInput | number
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    staffNo?: StringFieldUpdateOperationsInput | string
    lecturerId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RegisteredUnitsCreateInput = {
    unit: number
    student: StudentCreateNestedOneWithoutRegisteredUnitsInput
  }

  export type RegisteredUnitsUncheckedCreateInput = {
    id?: number
    unit: number
    registrationNumber: string
  }

  export type RegisteredUnitsUpdateInput = {
    unit?: IntFieldUpdateOperationsInput | number
    student?: StudentUpdateOneRequiredWithoutRegisteredUnitsNestedInput
  }

  export type RegisteredUnitsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    unit?: IntFieldUpdateOperationsInput | number
    registrationNumber?: StringFieldUpdateOperationsInput | string
  }

  export type RegisteredUnitsCreateManyInput = {
    id?: number
    unit: number
    registrationNumber: string
  }

  export type RegisteredUnitsUpdateManyMutationInput = {
    unit?: IntFieldUpdateOperationsInput | number
  }

  export type RegisteredUnitsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    unit?: IntFieldUpdateOperationsInput | number
    registrationNumber?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type LecturerRelationFilter = {
    is?: LecturerWhereInput | null
    isNot?: LecturerWhereInput | null
  }

  export type AdminRelationFilter = {
    is?: AdminWhereInput | null
    isNot?: AdminWhereInput | null
  }

  export type CourseListRelationFilter = {
    every?: CourseWhereInput
    some?: CourseWhereInput
    none?: CourseWhereInput
  }

  export type CourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StaffCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    staffNo?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type StaffAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StaffMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    staffNo?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type StaffMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    staffNo?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type StaffSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type StaffRelationFilter = {
    is?: StaffWhereInput
    isNot?: StaffWhereInput
  }

  export type LecturerCountOrderByAggregateInput = {
    id?: SortOrder
    staffNo?: SortOrder
    faculty?: SortOrder
    department?: SortOrder
    approved?: SortOrder
    unit?: SortOrder
  }

  export type LecturerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LecturerMaxOrderByAggregateInput = {
    id?: SortOrder
    staffNo?: SortOrder
    faculty?: SortOrder
    department?: SortOrder
    approved?: SortOrder
    unit?: SortOrder
  }

  export type LecturerMinOrderByAggregateInput = {
    id?: SortOrder
    staffNo?: SortOrder
    faculty?: SortOrder
    department?: SortOrder
    approved?: SortOrder
    unit?: SortOrder
  }

  export type LecturerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    staffNo?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    staffNo?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    staffNo?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RegisteredUnitsListRelationFilter = {
    every?: RegisteredUnitsWhereInput
    some?: RegisteredUnitsWhereInput
    none?: RegisteredUnitsWhereInput
  }

  export type RegisteredUnitsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentCountOrderByAggregateInput = {
    id?: SortOrder
    registrationNumber?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    year?: SortOrder
    approved?: SortOrder
    password?: SortOrder
    createdOn?: SortOrder
    updatedOn?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    id?: SortOrder
    registrationNumber?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    year?: SortOrder
    approved?: SortOrder
    password?: SortOrder
    createdOn?: SortOrder
    updatedOn?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    id?: SortOrder
    registrationNumber?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    year?: SortOrder
    approved?: SortOrder
    password?: SortOrder
    createdOn?: SortOrder
    updatedOn?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    yearSemester?: SortOrder
    unit?: SortOrder
    updated?: SortOrder
    staffNo?: SortOrder
    lecturerId?: SortOrder
  }

  export type CourseAvgOrderByAggregateInput = {
    id?: SortOrder
    unit?: SortOrder
    lecturerId?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    yearSemester?: SortOrder
    unit?: SortOrder
    updated?: SortOrder
    staffNo?: SortOrder
    lecturerId?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    yearSemester?: SortOrder
    unit?: SortOrder
    updated?: SortOrder
    staffNo?: SortOrder
    lecturerId?: SortOrder
  }

  export type CourseSumOrderByAggregateInput = {
    id?: SortOrder
    unit?: SortOrder
    lecturerId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type StudentRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type RegisteredUnitsCountOrderByAggregateInput = {
    id?: SortOrder
    unit?: SortOrder
    registrationNumber?: SortOrder
  }

  export type RegisteredUnitsAvgOrderByAggregateInput = {
    id?: SortOrder
    unit?: SortOrder
  }

  export type RegisteredUnitsMaxOrderByAggregateInput = {
    id?: SortOrder
    unit?: SortOrder
    registrationNumber?: SortOrder
  }

  export type RegisteredUnitsMinOrderByAggregateInput = {
    id?: SortOrder
    unit?: SortOrder
    registrationNumber?: SortOrder
  }

  export type RegisteredUnitsSumOrderByAggregateInput = {
    id?: SortOrder
    unit?: SortOrder
  }

  export type LecturerCreateNestedOneWithoutStaffInput = {
    create?: XOR<LecturerCreateWithoutStaffInput, LecturerUncheckedCreateWithoutStaffInput>
    connectOrCreate?: LecturerCreateOrConnectWithoutStaffInput
    connect?: LecturerWhereUniqueInput
  }

  export type AdminCreateNestedOneWithoutStaffInput = {
    create?: XOR<AdminCreateWithoutStaffInput, AdminUncheckedCreateWithoutStaffInput>
    connectOrCreate?: AdminCreateOrConnectWithoutStaffInput
    connect?: AdminWhereUniqueInput
  }

  export type CourseCreateNestedManyWithoutLecturerInput = {
    create?: XOR<Enumerable<CourseCreateWithoutLecturerInput>, Enumerable<CourseUncheckedCreateWithoutLecturerInput>>
    connectOrCreate?: Enumerable<CourseCreateOrConnectWithoutLecturerInput>
    createMany?: CourseCreateManyLecturerInputEnvelope
    connect?: Enumerable<CourseWhereUniqueInput>
  }

  export type LecturerUncheckedCreateNestedOneWithoutStaffInput = {
    create?: XOR<LecturerCreateWithoutStaffInput, LecturerUncheckedCreateWithoutStaffInput>
    connectOrCreate?: LecturerCreateOrConnectWithoutStaffInput
    connect?: LecturerWhereUniqueInput
  }

  export type AdminUncheckedCreateNestedOneWithoutStaffInput = {
    create?: XOR<AdminCreateWithoutStaffInput, AdminUncheckedCreateWithoutStaffInput>
    connectOrCreate?: AdminCreateOrConnectWithoutStaffInput
    connect?: AdminWhereUniqueInput
  }

  export type CourseUncheckedCreateNestedManyWithoutLecturerInput = {
    create?: XOR<Enumerable<CourseCreateWithoutLecturerInput>, Enumerable<CourseUncheckedCreateWithoutLecturerInput>>
    connectOrCreate?: Enumerable<CourseCreateOrConnectWithoutLecturerInput>
    createMany?: CourseCreateManyLecturerInputEnvelope
    connect?: Enumerable<CourseWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type LecturerUpdateOneWithoutStaffNestedInput = {
    create?: XOR<LecturerCreateWithoutStaffInput, LecturerUncheckedCreateWithoutStaffInput>
    connectOrCreate?: LecturerCreateOrConnectWithoutStaffInput
    upsert?: LecturerUpsertWithoutStaffInput
    disconnect?: boolean
    delete?: boolean
    connect?: LecturerWhereUniqueInput
    update?: XOR<LecturerUpdateWithoutStaffInput, LecturerUncheckedUpdateWithoutStaffInput>
  }

  export type AdminUpdateOneWithoutStaffNestedInput = {
    create?: XOR<AdminCreateWithoutStaffInput, AdminUncheckedCreateWithoutStaffInput>
    connectOrCreate?: AdminCreateOrConnectWithoutStaffInput
    upsert?: AdminUpsertWithoutStaffInput
    disconnect?: boolean
    delete?: boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<AdminUpdateWithoutStaffInput, AdminUncheckedUpdateWithoutStaffInput>
  }

  export type CourseUpdateManyWithoutLecturerNestedInput = {
    create?: XOR<Enumerable<CourseCreateWithoutLecturerInput>, Enumerable<CourseUncheckedCreateWithoutLecturerInput>>
    connectOrCreate?: Enumerable<CourseCreateOrConnectWithoutLecturerInput>
    upsert?: Enumerable<CourseUpsertWithWhereUniqueWithoutLecturerInput>
    createMany?: CourseCreateManyLecturerInputEnvelope
    set?: Enumerable<CourseWhereUniqueInput>
    disconnect?: Enumerable<CourseWhereUniqueInput>
    delete?: Enumerable<CourseWhereUniqueInput>
    connect?: Enumerable<CourseWhereUniqueInput>
    update?: Enumerable<CourseUpdateWithWhereUniqueWithoutLecturerInput>
    updateMany?: Enumerable<CourseUpdateManyWithWhereWithoutLecturerInput>
    deleteMany?: Enumerable<CourseScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LecturerUncheckedUpdateOneWithoutStaffNestedInput = {
    create?: XOR<LecturerCreateWithoutStaffInput, LecturerUncheckedCreateWithoutStaffInput>
    connectOrCreate?: LecturerCreateOrConnectWithoutStaffInput
    upsert?: LecturerUpsertWithoutStaffInput
    disconnect?: boolean
    delete?: boolean
    connect?: LecturerWhereUniqueInput
    update?: XOR<LecturerUpdateWithoutStaffInput, LecturerUncheckedUpdateWithoutStaffInput>
  }

  export type AdminUncheckedUpdateOneWithoutStaffNestedInput = {
    create?: XOR<AdminCreateWithoutStaffInput, AdminUncheckedCreateWithoutStaffInput>
    connectOrCreate?: AdminCreateOrConnectWithoutStaffInput
    upsert?: AdminUpsertWithoutStaffInput
    disconnect?: boolean
    delete?: boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<AdminUpdateWithoutStaffInput, AdminUncheckedUpdateWithoutStaffInput>
  }

  export type CourseUncheckedUpdateManyWithoutLecturerNestedInput = {
    create?: XOR<Enumerable<CourseCreateWithoutLecturerInput>, Enumerable<CourseUncheckedCreateWithoutLecturerInput>>
    connectOrCreate?: Enumerable<CourseCreateOrConnectWithoutLecturerInput>
    upsert?: Enumerable<CourseUpsertWithWhereUniqueWithoutLecturerInput>
    createMany?: CourseCreateManyLecturerInputEnvelope
    set?: Enumerable<CourseWhereUniqueInput>
    disconnect?: Enumerable<CourseWhereUniqueInput>
    delete?: Enumerable<CourseWhereUniqueInput>
    connect?: Enumerable<CourseWhereUniqueInput>
    update?: Enumerable<CourseUpdateWithWhereUniqueWithoutLecturerInput>
    updateMany?: Enumerable<CourseUpdateManyWithWhereWithoutLecturerInput>
    deleteMany?: Enumerable<CourseScalarWhereInput>
  }

  export type StaffCreateNestedOneWithoutLecturerInput = {
    create?: XOR<StaffCreateWithoutLecturerInput, StaffUncheckedCreateWithoutLecturerInput>
    connectOrCreate?: StaffCreateOrConnectWithoutLecturerInput
    connect?: StaffWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type StaffUpdateOneRequiredWithoutLecturerNestedInput = {
    create?: XOR<StaffCreateWithoutLecturerInput, StaffUncheckedCreateWithoutLecturerInput>
    connectOrCreate?: StaffCreateOrConnectWithoutLecturerInput
    upsert?: StaffUpsertWithoutLecturerInput
    connect?: StaffWhereUniqueInput
    update?: XOR<StaffUpdateWithoutLecturerInput, StaffUncheckedUpdateWithoutLecturerInput>
  }

  export type StaffCreateNestedOneWithoutAdminInput = {
    create?: XOR<StaffCreateWithoutAdminInput, StaffUncheckedCreateWithoutAdminInput>
    connectOrCreate?: StaffCreateOrConnectWithoutAdminInput
    connect?: StaffWhereUniqueInput
  }

  export type StaffUpdateOneRequiredWithoutAdminNestedInput = {
    create?: XOR<StaffCreateWithoutAdminInput, StaffUncheckedCreateWithoutAdminInput>
    connectOrCreate?: StaffCreateOrConnectWithoutAdminInput
    upsert?: StaffUpsertWithoutAdminInput
    connect?: StaffWhereUniqueInput
    update?: XOR<StaffUpdateWithoutAdminInput, StaffUncheckedUpdateWithoutAdminInput>
  }

  export type RegisteredUnitsCreateNestedManyWithoutStudentInput = {
    create?: XOR<Enumerable<RegisteredUnitsCreateWithoutStudentInput>, Enumerable<RegisteredUnitsUncheckedCreateWithoutStudentInput>>
    connectOrCreate?: Enumerable<RegisteredUnitsCreateOrConnectWithoutStudentInput>
    createMany?: RegisteredUnitsCreateManyStudentInputEnvelope
    connect?: Enumerable<RegisteredUnitsWhereUniqueInput>
  }

  export type RegisteredUnitsUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<Enumerable<RegisteredUnitsCreateWithoutStudentInput>, Enumerable<RegisteredUnitsUncheckedCreateWithoutStudentInput>>
    connectOrCreate?: Enumerable<RegisteredUnitsCreateOrConnectWithoutStudentInput>
    createMany?: RegisteredUnitsCreateManyStudentInputEnvelope
    connect?: Enumerable<RegisteredUnitsWhereUniqueInput>
  }

  export type RegisteredUnitsUpdateManyWithoutStudentNestedInput = {
    create?: XOR<Enumerable<RegisteredUnitsCreateWithoutStudentInput>, Enumerable<RegisteredUnitsUncheckedCreateWithoutStudentInput>>
    connectOrCreate?: Enumerable<RegisteredUnitsCreateOrConnectWithoutStudentInput>
    upsert?: Enumerable<RegisteredUnitsUpsertWithWhereUniqueWithoutStudentInput>
    createMany?: RegisteredUnitsCreateManyStudentInputEnvelope
    set?: Enumerable<RegisteredUnitsWhereUniqueInput>
    disconnect?: Enumerable<RegisteredUnitsWhereUniqueInput>
    delete?: Enumerable<RegisteredUnitsWhereUniqueInput>
    connect?: Enumerable<RegisteredUnitsWhereUniqueInput>
    update?: Enumerable<RegisteredUnitsUpdateWithWhereUniqueWithoutStudentInput>
    updateMany?: Enumerable<RegisteredUnitsUpdateManyWithWhereWithoutStudentInput>
    deleteMany?: Enumerable<RegisteredUnitsScalarWhereInput>
  }

  export type RegisteredUnitsUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<Enumerable<RegisteredUnitsCreateWithoutStudentInput>, Enumerable<RegisteredUnitsUncheckedCreateWithoutStudentInput>>
    connectOrCreate?: Enumerable<RegisteredUnitsCreateOrConnectWithoutStudentInput>
    upsert?: Enumerable<RegisteredUnitsUpsertWithWhereUniqueWithoutStudentInput>
    createMany?: RegisteredUnitsCreateManyStudentInputEnvelope
    set?: Enumerable<RegisteredUnitsWhereUniqueInput>
    disconnect?: Enumerable<RegisteredUnitsWhereUniqueInput>
    delete?: Enumerable<RegisteredUnitsWhereUniqueInput>
    connect?: Enumerable<RegisteredUnitsWhereUniqueInput>
    update?: Enumerable<RegisteredUnitsUpdateWithWhereUniqueWithoutStudentInput>
    updateMany?: Enumerable<RegisteredUnitsUpdateManyWithWhereWithoutStudentInput>
    deleteMany?: Enumerable<RegisteredUnitsScalarWhereInput>
  }

  export type StaffCreateNestedOneWithoutCourseInput = {
    create?: XOR<StaffCreateWithoutCourseInput, StaffUncheckedCreateWithoutCourseInput>
    connectOrCreate?: StaffCreateOrConnectWithoutCourseInput
    connect?: StaffWhereUniqueInput
  }

  export type LecturerCreateNestedOneWithoutCoursesInput = {
    create?: XOR<LecturerCreateWithoutCoursesInput, LecturerUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: LecturerCreateOrConnectWithoutCoursesInput
    connect?: LecturerWhereUniqueInput
  }

  export type StaffUpdateOneRequiredWithoutCourseNestedInput = {
    create?: XOR<StaffCreateWithoutCourseInput, StaffUncheckedCreateWithoutCourseInput>
    connectOrCreate?: StaffCreateOrConnectWithoutCourseInput
    upsert?: StaffUpsertWithoutCourseInput
    connect?: StaffWhereUniqueInput
    update?: XOR<StaffUpdateWithoutCourseInput, StaffUncheckedUpdateWithoutCourseInput>
  }

  export type LecturerUpdateOneWithoutCoursesNestedInput = {
    create?: XOR<LecturerCreateWithoutCoursesInput, LecturerUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: LecturerCreateOrConnectWithoutCoursesInput
    upsert?: LecturerUpsertWithoutCoursesInput
    disconnect?: boolean
    delete?: boolean
    connect?: LecturerWhereUniqueInput
    update?: XOR<LecturerUpdateWithoutCoursesInput, LecturerUncheckedUpdateWithoutCoursesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StudentCreateNestedOneWithoutRegisteredUnitsInput = {
    create?: XOR<StudentCreateWithoutRegisteredUnitsInput, StudentUncheckedCreateWithoutRegisteredUnitsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutRegisteredUnitsInput
    connect?: StudentWhereUniqueInput
  }

  export type StudentUpdateOneRequiredWithoutRegisteredUnitsNestedInput = {
    create?: XOR<StudentCreateWithoutRegisteredUnitsInput, StudentUncheckedCreateWithoutRegisteredUnitsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutRegisteredUnitsInput
    upsert?: StudentUpsertWithoutRegisteredUnitsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<StudentUpdateWithoutRegisteredUnitsInput, StudentUncheckedUpdateWithoutRegisteredUnitsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type LecturerCreateWithoutStaffInput = {
    faculty: string
    department: string
    approved: boolean
    unit: string
    courses?: CourseCreateNestedManyWithoutLecturerInput
  }

  export type LecturerUncheckedCreateWithoutStaffInput = {
    id?: number
    faculty: string
    department: string
    approved: boolean
    unit: string
    courses?: CourseUncheckedCreateNestedManyWithoutLecturerInput
  }

  export type LecturerCreateOrConnectWithoutStaffInput = {
    where: LecturerWhereUniqueInput
    create: XOR<LecturerCreateWithoutStaffInput, LecturerUncheckedCreateWithoutStaffInput>
  }

  export type AdminCreateWithoutStaffInput = {
    username: string
  }

  export type AdminUncheckedCreateWithoutStaffInput = {
    id?: number
    username: string
  }

  export type AdminCreateOrConnectWithoutStaffInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutStaffInput, AdminUncheckedCreateWithoutStaffInput>
  }

  export type CourseCreateWithoutLecturerInput = {
    yearSemester: string
    unit: number
    updated?: Date | string
    Lecturer?: LecturerCreateNestedOneWithoutCoursesInput
  }

  export type CourseUncheckedCreateWithoutLecturerInput = {
    id?: number
    yearSemester: string
    unit: number
    updated?: Date | string
    lecturerId?: number | null
  }

  export type CourseCreateOrConnectWithoutLecturerInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutLecturerInput, CourseUncheckedCreateWithoutLecturerInput>
  }

  export type CourseCreateManyLecturerInputEnvelope = {
    data: Enumerable<CourseCreateManyLecturerInput>
    skipDuplicates?: boolean
  }

  export type LecturerUpsertWithoutStaffInput = {
    update: XOR<LecturerUpdateWithoutStaffInput, LecturerUncheckedUpdateWithoutStaffInput>
    create: XOR<LecturerCreateWithoutStaffInput, LecturerUncheckedCreateWithoutStaffInput>
  }

  export type LecturerUpdateWithoutStaffInput = {
    faculty?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    unit?: StringFieldUpdateOperationsInput | string
    courses?: CourseUpdateManyWithoutLecturerNestedInput
  }

  export type LecturerUncheckedUpdateWithoutStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    faculty?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    unit?: StringFieldUpdateOperationsInput | string
    courses?: CourseUncheckedUpdateManyWithoutLecturerNestedInput
  }

  export type AdminUpsertWithoutStaffInput = {
    update: XOR<AdminUpdateWithoutStaffInput, AdminUncheckedUpdateWithoutStaffInput>
    create: XOR<AdminCreateWithoutStaffInput, AdminUncheckedCreateWithoutStaffInput>
  }

  export type AdminUpdateWithoutStaffInput = {
    username?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateWithoutStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
  }

  export type CourseUpsertWithWhereUniqueWithoutLecturerInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutLecturerInput, CourseUncheckedUpdateWithoutLecturerInput>
    create: XOR<CourseCreateWithoutLecturerInput, CourseUncheckedCreateWithoutLecturerInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutLecturerInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutLecturerInput, CourseUncheckedUpdateWithoutLecturerInput>
  }

  export type CourseUpdateManyWithWhereWithoutLecturerInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutCourseInput>
  }

  export type CourseScalarWhereInput = {
    AND?: Enumerable<CourseScalarWhereInput>
    OR?: Enumerable<CourseScalarWhereInput>
    NOT?: Enumerable<CourseScalarWhereInput>
    id?: IntFilter | number
    yearSemester?: StringFilter | string
    unit?: IntFilter | number
    updated?: DateTimeFilter | Date | string
    staffNo?: StringFilter | string
    lecturerId?: IntNullableFilter | number | null
  }

  export type StaffCreateWithoutLecturerInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    staffNo: string
    password: string
    role: string
    admin?: AdminCreateNestedOneWithoutStaffInput
    Course?: CourseCreateNestedManyWithoutLecturerInput
  }

  export type StaffUncheckedCreateWithoutLecturerInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    staffNo: string
    password: string
    role: string
    admin?: AdminUncheckedCreateNestedOneWithoutStaffInput
    Course?: CourseUncheckedCreateNestedManyWithoutLecturerInput
  }

  export type StaffCreateOrConnectWithoutLecturerInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutLecturerInput, StaffUncheckedCreateWithoutLecturerInput>
  }

  export type StaffUpsertWithoutLecturerInput = {
    update: XOR<StaffUpdateWithoutLecturerInput, StaffUncheckedUpdateWithoutLecturerInput>
    create: XOR<StaffCreateWithoutLecturerInput, StaffUncheckedCreateWithoutLecturerInput>
  }

  export type StaffUpdateWithoutLecturerInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    staffNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    admin?: AdminUpdateOneWithoutStaffNestedInput
    Course?: CourseUpdateManyWithoutLecturerNestedInput
  }

  export type StaffUncheckedUpdateWithoutLecturerInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    staffNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    admin?: AdminUncheckedUpdateOneWithoutStaffNestedInput
    Course?: CourseUncheckedUpdateManyWithoutLecturerNestedInput
  }

  export type StaffCreateWithoutAdminInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    staffNo: string
    password: string
    role: string
    lecturer?: LecturerCreateNestedOneWithoutStaffInput
    Course?: CourseCreateNestedManyWithoutLecturerInput
  }

  export type StaffUncheckedCreateWithoutAdminInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    staffNo: string
    password: string
    role: string
    lecturer?: LecturerUncheckedCreateNestedOneWithoutStaffInput
    Course?: CourseUncheckedCreateNestedManyWithoutLecturerInput
  }

  export type StaffCreateOrConnectWithoutAdminInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutAdminInput, StaffUncheckedCreateWithoutAdminInput>
  }

  export type StaffUpsertWithoutAdminInput = {
    update: XOR<StaffUpdateWithoutAdminInput, StaffUncheckedUpdateWithoutAdminInput>
    create: XOR<StaffCreateWithoutAdminInput, StaffUncheckedCreateWithoutAdminInput>
  }

  export type StaffUpdateWithoutAdminInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    staffNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lecturer?: LecturerUpdateOneWithoutStaffNestedInput
    Course?: CourseUpdateManyWithoutLecturerNestedInput
  }

  export type StaffUncheckedUpdateWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    staffNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lecturer?: LecturerUncheckedUpdateOneWithoutStaffNestedInput
    Course?: CourseUncheckedUpdateManyWithoutLecturerNestedInput
  }

  export type RegisteredUnitsCreateWithoutStudentInput = {
    unit: number
  }

  export type RegisteredUnitsUncheckedCreateWithoutStudentInput = {
    id?: number
    unit: number
  }

  export type RegisteredUnitsCreateOrConnectWithoutStudentInput = {
    where: RegisteredUnitsWhereUniqueInput
    create: XOR<RegisteredUnitsCreateWithoutStudentInput, RegisteredUnitsUncheckedCreateWithoutStudentInput>
  }

  export type RegisteredUnitsCreateManyStudentInputEnvelope = {
    data: Enumerable<RegisteredUnitsCreateManyStudentInput>
    skipDuplicates?: boolean
  }

  export type RegisteredUnitsUpsertWithWhereUniqueWithoutStudentInput = {
    where: RegisteredUnitsWhereUniqueInput
    update: XOR<RegisteredUnitsUpdateWithoutStudentInput, RegisteredUnitsUncheckedUpdateWithoutStudentInput>
    create: XOR<RegisteredUnitsCreateWithoutStudentInput, RegisteredUnitsUncheckedCreateWithoutStudentInput>
  }

  export type RegisteredUnitsUpdateWithWhereUniqueWithoutStudentInput = {
    where: RegisteredUnitsWhereUniqueInput
    data: XOR<RegisteredUnitsUpdateWithoutStudentInput, RegisteredUnitsUncheckedUpdateWithoutStudentInput>
  }

  export type RegisteredUnitsUpdateManyWithWhereWithoutStudentInput = {
    where: RegisteredUnitsScalarWhereInput
    data: XOR<RegisteredUnitsUpdateManyMutationInput, RegisteredUnitsUncheckedUpdateManyWithoutRegisteredUnitsInput>
  }

  export type RegisteredUnitsScalarWhereInput = {
    AND?: Enumerable<RegisteredUnitsScalarWhereInput>
    OR?: Enumerable<RegisteredUnitsScalarWhereInput>
    NOT?: Enumerable<RegisteredUnitsScalarWhereInput>
    id?: IntFilter | number
    unit?: IntFilter | number
    registrationNumber?: StringFilter | string
  }

  export type StaffCreateWithoutCourseInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    staffNo: string
    password: string
    role: string
    lecturer?: LecturerCreateNestedOneWithoutStaffInput
    admin?: AdminCreateNestedOneWithoutStaffInput
  }

  export type StaffUncheckedCreateWithoutCourseInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    staffNo: string
    password: string
    role: string
    lecturer?: LecturerUncheckedCreateNestedOneWithoutStaffInput
    admin?: AdminUncheckedCreateNestedOneWithoutStaffInput
  }

  export type StaffCreateOrConnectWithoutCourseInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutCourseInput, StaffUncheckedCreateWithoutCourseInput>
  }

  export type LecturerCreateWithoutCoursesInput = {
    faculty: string
    department: string
    approved: boolean
    unit: string
    staff: StaffCreateNestedOneWithoutLecturerInput
  }

  export type LecturerUncheckedCreateWithoutCoursesInput = {
    id?: number
    staffNo: string
    faculty: string
    department: string
    approved: boolean
    unit: string
  }

  export type LecturerCreateOrConnectWithoutCoursesInput = {
    where: LecturerWhereUniqueInput
    create: XOR<LecturerCreateWithoutCoursesInput, LecturerUncheckedCreateWithoutCoursesInput>
  }

  export type StaffUpsertWithoutCourseInput = {
    update: XOR<StaffUpdateWithoutCourseInput, StaffUncheckedUpdateWithoutCourseInput>
    create: XOR<StaffCreateWithoutCourseInput, StaffUncheckedCreateWithoutCourseInput>
  }

  export type StaffUpdateWithoutCourseInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    staffNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lecturer?: LecturerUpdateOneWithoutStaffNestedInput
    admin?: AdminUpdateOneWithoutStaffNestedInput
  }

  export type StaffUncheckedUpdateWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    staffNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lecturer?: LecturerUncheckedUpdateOneWithoutStaffNestedInput
    admin?: AdminUncheckedUpdateOneWithoutStaffNestedInput
  }

  export type LecturerUpsertWithoutCoursesInput = {
    update: XOR<LecturerUpdateWithoutCoursesInput, LecturerUncheckedUpdateWithoutCoursesInput>
    create: XOR<LecturerCreateWithoutCoursesInput, LecturerUncheckedCreateWithoutCoursesInput>
  }

  export type LecturerUpdateWithoutCoursesInput = {
    faculty?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    unit?: StringFieldUpdateOperationsInput | string
    staff?: StaffUpdateOneRequiredWithoutLecturerNestedInput
  }

  export type LecturerUncheckedUpdateWithoutCoursesInput = {
    id?: IntFieldUpdateOperationsInput | number
    staffNo?: StringFieldUpdateOperationsInput | string
    faculty?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    unit?: StringFieldUpdateOperationsInput | string
  }

  export type StudentCreateWithoutRegisteredUnitsInput = {
    registrationNumber: string
    firstName: string
    lastName: string
    email: string
    year: number
    approved: boolean
    password: string
    createdOn?: Date | string
    updatedOn?: Date | string
  }

  export type StudentUncheckedCreateWithoutRegisteredUnitsInput = {
    id?: number
    registrationNumber: string
    firstName: string
    lastName: string
    email: string
    year: number
    approved: boolean
    password: string
    createdOn?: Date | string
    updatedOn?: Date | string
  }

  export type StudentCreateOrConnectWithoutRegisteredUnitsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutRegisteredUnitsInput, StudentUncheckedCreateWithoutRegisteredUnitsInput>
  }

  export type StudentUpsertWithoutRegisteredUnitsInput = {
    update: XOR<StudentUpdateWithoutRegisteredUnitsInput, StudentUncheckedUpdateWithoutRegisteredUnitsInput>
    create: XOR<StudentCreateWithoutRegisteredUnitsInput, StudentUncheckedCreateWithoutRegisteredUnitsInput>
  }

  export type StudentUpdateWithoutRegisteredUnitsInput = {
    registrationNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    approved?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUncheckedUpdateWithoutRegisteredUnitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    registrationNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    approved?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseCreateManyLecturerInput = {
    id?: number
    yearSemester: string
    unit: number
    updated?: Date | string
    lecturerId?: number | null
  }

  export type CourseUpdateWithoutLecturerInput = {
    yearSemester?: StringFieldUpdateOperationsInput | string
    unit?: IntFieldUpdateOperationsInput | number
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    Lecturer?: LecturerUpdateOneWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateWithoutLecturerInput = {
    id?: IntFieldUpdateOperationsInput | number
    yearSemester?: StringFieldUpdateOperationsInput | string
    unit?: IntFieldUpdateOperationsInput | number
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    lecturerId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CourseUncheckedUpdateManyWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    yearSemester?: StringFieldUpdateOperationsInput | string
    unit?: IntFieldUpdateOperationsInput | number
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    lecturerId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RegisteredUnitsCreateManyStudentInput = {
    id?: number
    unit: number
  }

  export type RegisteredUnitsUpdateWithoutStudentInput = {
    unit?: IntFieldUpdateOperationsInput | number
  }

  export type RegisteredUnitsUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    unit?: IntFieldUpdateOperationsInput | number
  }

  export type RegisteredUnitsUncheckedUpdateManyWithoutRegisteredUnitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    unit?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}